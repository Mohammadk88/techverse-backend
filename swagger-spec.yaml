openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - App
  /auth/register:
    post:
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '409':
          description: User already exists
      summary: Register a new user
      tags:
        - Authentication
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '401':
          description: Invalid credentials
      summary: Login user
      tags:
        - Authentication
  /auth/profile:
    get:
      operationId: AuthController_getProfile
      parameters: []
      responses:
        '200':
          description: User profile retrieved successfully
        '401':
          description: Unauthorized
      security:
        - X-HTTP-TOKEN: []
      summary: Get current user profile
      tags:
        - Authentication
  /users:
    get:
      operationId: UsersController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number (1-based)
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: number
      responses:
        '200':
          description: Users retrieved successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Get all users (Admin only)
      tags:
        - Users
  /users/{id}:
    get:
      operationId: UsersController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: User retrieved successfully
        '404':
          description: User not found
      security:
        - X-HTTP-TOKEN: []
      summary: Get user by ID
      tags:
        - Users
    delete:
      operationId: UsersController_deactivateUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: User deactivated successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Deactivate user
      tags:
        - Users
  /users/profile:
    get:
      operationId: UsersController_getProfile
      parameters: []
      responses:
        '200':
          description: User profile retrieved successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Get current user profile
      tags:
        - Users
    patch:
      operationId: UsersController_updateProfile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Profile updated successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Update own profile
      tags:
        - Users
  /users/{id}/role:
    patch:
      operationId: UsersController_updateRole
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRoleDto'
      responses:
        '200':
          description: User role updated successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Update user role (Admin only)
      tags:
        - Users
  /users/leaderboard/xp:
    get:
      operationId: UsersController_getLeaderboard
      parameters:
        - name: limit
          required: false
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Leaderboard retrieved successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Get XP leaderboard
      tags:
        - Users
  /articles:
    post:
      operationId: ArticlesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleDto'
      responses:
        '201':
          description: Article created successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Create new article (Journalists/Baristas only)
      tags:
        - Articles
    get:
      operationId: ArticlesController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number (1-based)
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: number
        - name: categoryId
          required: false
          in: query
          description: Filter by category ID
          schema:
            example: 1
            type: number
        - name: tagId
          required: false
          in: query
          description: Filter by tag ID
          schema:
            example: 1
            type: number
        - name: search
          required: false
          in: query
          description: Search in title and content
          schema:
            example: nestjs
            type: string
        - name: isPublished
          required: false
          in: query
          description: Filter by published status
          schema:
            example: true
            type: boolean
      responses:
        '200':
          description: Articles retrieved successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Get all articles (Public)
      tags:
        - Articles
  /articles/{id}:
    get:
      operationId: ArticlesController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Article retrieved successfully
        '404':
          description: Article not found
      security:
        - X-HTTP-TOKEN: []
      summary: Get article by ID
      tags:
        - Articles
    patch:
      operationId: ArticlesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleDto'
      responses:
        '200':
          description: Article updated successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Update article (Author only)
      tags:
        - Articles
    delete:
      operationId: ArticlesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Article deleted successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Delete article (Author/Barista only)
      tags:
        - Articles
  /articles/slug/{slug}:
    get:
      operationId: ArticlesController_findBySlug
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Article retrieved successfully
        '404':
          description: Article not found
      security:
        - X-HTTP-TOKEN: []
      summary: Get article by slug (Public)
      tags:
        - Articles
  /articles/categories:
    post:
      operationId: ArticlesController_createCategory
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryDto'
      responses:
        '201':
          description: Category created successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Create new category (Baristas only)
      tags:
        - Articles
  /articles/categories/all:
    get:
      operationId: ArticlesController_findAllCategories
      parameters: []
      responses:
        '200':
          description: Categories retrieved successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Get all categories (Public)
      tags:
        - Articles
  /articles/tags:
    post:
      operationId: ArticlesController_createTag
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagDto'
      responses:
        '201':
          description: Tag created successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Create new tag (Baristas only)
      tags:
        - Articles
  /articles/tags/all:
    get:
      operationId: ArticlesController_findAllTags
      parameters: []
      responses:
        '200':
          description: Tags retrieved successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Get all tags (Public)
      tags:
        - Articles
  /posts:
    post:
      operationId: PostsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostDto'
      responses:
        '201':
          description: ''
      security:
        - bearer: []
      tags:
        - Posts
    get:
      operationId: PostsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number (1-based)
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: number
        - name: cafeId
          required: false
          in: query
          description: Filter by cafe ID
          schema:
            type: number
        - name: tagId
          required: false
          in: query
          description: Filter by tag ID
          schema:
            type: number
        - name: type
          required: false
          in: query
          description: Filter by post type
          schema:
            type: string
            enum:
              - TEXT
              - IMAGE
              - VIDEO
              - LINK
        - name: isPublic
          required: false
          in: query
          description: Filter by public/private posts
          schema:
            type: boolean
        - name: authorId
          required: false
          in: query
          description: Filter by author ID
          schema:
            type: number
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Posts
  /posts/{id}:
    get:
      operationId: PostsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Posts
    patch:
      operationId: PostsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostDto'
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Posts
    delete:
      operationId: PostsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Posts
  /posts/{id}/bookmark:
    post:
      operationId: PostsController_toggleBookmark
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '201':
          description: ''
      security:
        - bearer: []
      tags:
        - Posts
  /cafes:
    post:
      operationId: CafesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCafeDto'
      responses:
        '201':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
    get:
      operationId: CafesController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number (1-based)
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: number
        - name: search
          required: false
          in: query
          description: Search cafes by name
          schema:
            type: string
        - name: isPrivate
          required: false
          in: query
          description: Filter by private/public cafes
          schema:
            type: boolean
        - name: ownerId
          required: false
          in: query
          description: Filter by owner ID
          schema:
            type: number
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
  /cafes/{id}:
    get:
      operationId: CafesController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
    patch:
      operationId: CafesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCafeDto'
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
    delete:
      operationId: CafesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
  /cafes/slug/{slug}:
    get:
      operationId: CafesController_findBySlug
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
  /cafes/{id}/join:
    post:
      operationId: CafesController_joinCafe
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '201':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
  /cafes/{id}/leave:
    post:
      operationId: CafesController_leaveCafe
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '201':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
  /cafes/{id}/posts:
    post:
      operationId: CafesController_createPost
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCafePostDto'
      responses:
        '201':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
    get:
      operationId: CafesController_getCafePosts
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: Page number (1-based)
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: number
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
  /cafes/posts/{postId}:
    patch:
      operationId: CafesController_updateCafePost
      parameters:
        - name: postId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCafePostDto'
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
    delete:
      operationId: CafesController_deleteCafePost
      parameters:
        - name: postId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      security:
        - bearer: []
      tags:
        - Cafés
  /forums:
    post:
      operationId: ForumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateForumDto'
      responses:
        '201':
          description: Forum created successfully
      security:
        - bearer: []
      summary: Create a new forum
      tags:
        - forums
    get:
      operationId: ForumController_findAll
      parameters:
        - name: page
          required: false
          in: query
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          schema:
            default: 10
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: isPublic
          required: false
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Forums retrieved successfully
      security:
        - bearer: []
      summary: Get all forums with pagination
      tags:
        - forums
  /forums/{id}:
    get:
      operationId: ForumController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Forum retrieved successfully
        '404':
          description: Forum not found
      security:
        - bearer: []
      summary: Get forum by ID
      tags:
        - forums
    patch:
      operationId: ForumController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateForumDto'
      responses:
        '200':
          description: Forum updated successfully
        '403':
          description: Only forum creator can update
        '404':
          description: Forum not found
      security:
        - bearer: []
      summary: Update forum
      tags:
        - forums
    delete:
      operationId: ForumController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Forum deleted successfully
        '403':
          description: Only forum creator can delete
        '404':
          description: Forum not found
      security:
        - bearer: []
      summary: Delete forum
      tags:
        - forums
  /forums/slug/{slug}:
    get:
      operationId: ForumController_findBySlug
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Forum retrieved successfully
        '404':
          description: Forum not found
      security:
        - bearer: []
      summary: Get forum by slug
      tags:
        - forums
  /forums/{id}/join:
    post:
      operationId: ForumController_joinForum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Successfully joined forum
        '403':
          description: Already a member
        '404':
          description: Forum not found
      security:
        - bearer: []
      summary: Join a forum
      tags:
        - forums
  /forums/{id}/leave:
    delete:
      operationId: ForumController_leaveForum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully left forum
        '404':
          description: Not a member of this forum
      security:
        - bearer: []
      summary: Leave a forum
      tags:
        - forums
  /podcasts/playlists:
    post:
      operationId: PodcastController_createPlaylist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlaylistDto'
      responses:
        '201':
          description: Playlist created successfully
      security:
        - bearer: []
      summary: Create a new playlist
      tags:
        - podcasts
    get:
      operationId: PodcastController_getPlaylists
      parameters:
        - name: page
          required: false
          in: query
          description: Page number for pagination
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: number
        - name: search
          required: false
          in: query
          description: Search term for playlist title or description
          schema:
            example: tech
            type: string
        - name: isPublic
          required: false
          in: query
          description: Filter by public/private status
          schema:
            type: boolean
      responses:
        '200':
          description: Playlists retrieved successfully
      summary: Get all playlists with pagination
      tags:
        - podcasts
  /podcasts/playlists/{id}:
    get:
      operationId: PodcastController_getPlaylist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Playlist retrieved successfully
        '404':
          description: Playlist not found
      summary: Get playlist by ID with episodes
      tags:
        - podcasts
    patch:
      operationId: PodcastController_updatePlaylist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlaylistDto'
      responses:
        '200':
          description: Playlist updated successfully
        '404':
          description: Playlist not found
      security:
        - bearer: []
      summary: Update playlist
      tags:
        - podcasts
    delete:
      operationId: PodcastController_deletePlaylist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Playlist deleted successfully
        '404':
          description: Playlist not found
      security:
        - bearer: []
      summary: Delete playlist
      tags:
        - podcasts
  /podcasts/episodes:
    post:
      operationId: PodcastController_createEpisode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEpisodeDto'
      responses:
        '201':
          description: Episode created successfully
        '404':
          description: Playlist not found
      security:
        - bearer: []
      summary: Create a new episode
      tags:
        - podcasts
    get:
      operationId: PodcastController_getEpisodes
      parameters:
        - name: page
          required: false
          in: query
          description: Page number for pagination
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: number
        - name: search
          required: false
          in: query
          description: Search term for episode title or description
          schema:
            example: react
            type: string
        - name: isPublished
          required: false
          in: query
          description: Filter by published status
          schema:
            type: boolean
        - name: playlistId
          required: false
          in: query
          description: Filter by playlist ID
          schema:
            type: number
      responses:
        '200':
          description: Episodes retrieved successfully
      summary: Get all episodes with pagination
      tags:
        - podcasts
  /podcasts/episodes/{id}:
    get:
      operationId: PodcastController_getEpisode
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Episode retrieved successfully
        '404':
          description: Episode not found
      summary: Get episode by ID
      tags:
        - podcasts
    patch:
      operationId: PodcastController_updateEpisode
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEpisodeDto'
      responses:
        '200':
          description: Episode updated successfully
        '404':
          description: Episode not found
      security:
        - bearer: []
      summary: Update episode
      tags:
        - podcasts
    delete:
      operationId: PodcastController_deleteEpisode
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Episode deleted successfully
        '404':
          description: Episode not found
      security:
        - bearer: []
      summary: Delete episode
      tags:
        - podcasts
  /podcasts/episodes/{id}/like:
    post:
      operationId: PodcastController_likeEpisode
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Episode like toggled successfully
        '404':
          description: Episode not found
      security:
        - bearer: []
      summary: Like/unlike an episode
      tags:
        - podcasts
  /podcasts/episodes/{id}/comments:
    get:
      operationId: PodcastController_getEpisodeComments
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: true
          in: query
          schema:
            type: string
        - name: limit
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Comments retrieved successfully
      summary: Get episode comments
      tags:
        - podcasts
    post:
      operationId: PodcastController_createEpisodeComment
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEpisodeCommentDto'
      responses:
        '201':
          description: Comment created successfully
        '404':
          description: Episode not found
      security:
        - bearer: []
      summary: Add comment to episode
      tags:
        - podcasts
  /podcasts/comments/{id}:
    patch:
      operationId: PodcastController_updateEpisodeComment
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEpisodeCommentDto'
      responses:
        '200':
          description: Comment updated successfully
        '403':
          description: Can only edit own comments
        '404':
          description: Comment not found
      security:
        - bearer: []
      summary: Update episode comment
      tags:
        - podcasts
    delete:
      operationId: PodcastController_deleteEpisodeComment
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
        '403':
          description: Can only delete own comments
        '404':
          description: Comment not found
      security:
        - bearer: []
      summary: Delete episode comment
      tags:
        - podcasts
  /bookmarks:
    post:
      operationId: BookmarksController_createBookmark
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookmarkDto'
      responses:
        '201':
          description: Bookmark created successfully
        '400':
          description: Invalid bookmark data
        '404':
          description: Resource not found
        '409':
          description: Resource already bookmarked
      security:
        - bearer: []
      summary: Create a new bookmark
      tags:
        - bookmarks
    get:
      operationId: BookmarksController_getBookmarks
      parameters:
        - name: page
          required: false
          in: query
          description: Page number for pagination
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: number
        - name: type
          required: false
          in: query
          description: Filter by bookmark type
          schema:
            type: string
            enum:
              - ARTICLE
              - POST
      responses:
        '200':
          description: Bookmarks retrieved successfully
      security:
        - bearer: []
      summary: Get user bookmarks with pagination
      tags:
        - bookmarks
  /bookmarks/stats:
    get:
      operationId: BookmarksController_getBookmarkStats
      parameters: []
      responses:
        '200':
          description: Bookmark stats retrieved successfully
      security:
        - bearer: []
      summary: Get bookmark statistics
      tags:
        - bookmarks
  /bookmarks/{id}:
    get:
      operationId: BookmarksController_getBookmark
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Bookmark retrieved successfully
        '404':
          description: Bookmark not found
      security:
        - bearer: []
      summary: Get bookmark by ID
      tags:
        - bookmarks
    delete:
      operationId: BookmarksController_deleteBookmark
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Bookmark deleted successfully
        '404':
          description: Bookmark not found
      security:
        - bearer: []
      summary: Delete bookmark by ID
      tags:
        - bookmarks
  /bookmarks/article/{articleId}:
    delete:
      operationId: BookmarksController_removeArticleBookmark
      parameters:
        - name: articleId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Article bookmark removed successfully
        '404':
          description: Bookmark not found
      security:
        - bearer: []
      summary: Remove article bookmark
      tags:
        - bookmarks
  /bookmarks/post/{postId}:
    delete:
      operationId: BookmarksController_removePostBookmark
      parameters:
        - name: postId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Post bookmark removed successfully
        '404':
          description: Bookmark not found
      security:
        - bearer: []
      summary: Remove post bookmark
      tags:
        - bookmarks
  /languages:
    get:
      operationId: LanguagesController_findAll
      parameters: []
      responses:
        '200':
          description: List of supported UI languages
          content:
            application/json:
              example:
                - id: 1
                  name: English
                  nativeName: English
                  code: en
                  direction: ltr
                  createdAt: '2025-01-01T00:00:00.000Z'
                  updatedAt: '2025-01-01T00:00:00.000Z'
      summary: Get all supported languages
      tags:
        - languages
  /countries:
    get:
      operationId: CountriesController_findAll
      parameters: []
      responses:
        '200':
          description: List of countries with default language
          content:
            application/json:
              example:
                - id: 1
                  name: United States
                  code: US
                  languageId: 1
                  language:
                    id: 1
                    name: English
                    nativeName: English
                    code: en
                    direction: ltr
                  createdAt: '2025-01-01T00:00:00.000Z'
                  updatedAt: '2025-01-01T00:00:00.000Z'
      summary: Get all countries
      tags:
        - countries
  /countries/{id}/cities:
    get:
      operationId: CountriesController_findCitiesByCountry
      parameters:
        - name: id
          required: true
          in: path
          description: Country ID
          schema:
            type: number
      responses:
        '200':
          description: List of cities in the country
          content:
            application/json:
              example:
                - id: 1
                  name: New York
                  countryId: 1
                  createdAt: '2025-01-01T00:00:00.000Z'
                  updatedAt: '2025-01-01T00:00:00.000Z'
      summary: Get cities by country
      tags:
        - countries
  /roles/global:
    get:
      operationId: RolesController_getGlobalRoles
      parameters: []
      responses:
        '200':
          description: List of global roles
      security:
        - X-HTTP-TOKEN: []
      summary: Get all global roles
      tags:
        - roles
    post:
      operationId: RolesController_createGlobalRole
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGlobalRoleDto'
      responses:
        '201':
          description: Global role created successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Create a new global role
      tags:
        - roles
  /roles/cafe:
    get:
      operationId: RolesController_getCafeRoles
      parameters: []
      responses:
        '200':
          description: List of café roles
      security:
        - X-HTTP-TOKEN: []
      summary: Get all café roles
      tags:
        - roles
    post:
      operationId: RolesController_createCafeRole
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCafeRoleDto'
      responses:
        '201':
          description: Café role created successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Create a new café role
      tags:
        - roles
  /roles/user/{id}/assign-global-role:
    post:
      operationId: RolesController_assignGlobalRole
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignGlobalRoleDto'
      responses:
        '201':
          description: Global role assigned successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Assign global role to user
      tags:
        - roles
  /roles/user/{id}/remove-global-role/{roleId}:
    delete:
      operationId: RolesController_removeGlobalRole
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: number
        - name: roleId
          required: true
          in: path
          description: Role ID
          schema:
            type: number
      responses:
        '200':
          description: Global role removed successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Remove global role from user
      tags:
        - roles
  /roles/cafe/{cafeId}/assign-role:
    post:
      operationId: RolesController_assignCafeRole
      parameters:
        - name: cafeId
          required: true
          in: path
          description: Café ID
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignCafeRoleDto'
      responses:
        '201':
          description: Café role assigned successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Assign café role to user
      tags:
        - roles
  /roles/cafe/{cafeId}/remove-role/{userId}/{roleId}:
    delete:
      operationId: RolesController_removeCafeRole
      parameters:
        - name: cafeId
          required: true
          in: path
          description: Café ID
          schema:
            type: number
        - name: userId
          required: true
          in: path
          description: User ID
          schema:
            type: number
        - name: roleId
          required: true
          in: path
          description: Role ID
          schema:
            type: number
      responses:
        '200':
          description: Café role removed successfully
      security:
        - X-HTTP-TOKEN: []
      summary: Remove café role from user
      tags:
        - roles
  /roles/user/{id}/global:
    get:
      operationId: RolesController_getUserGlobalRoles
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: number
      responses:
        '200':
          description: User global roles
      security:
        - X-HTTP-TOKEN: []
      summary: Get user global roles
      tags:
        - roles
  /roles/user/{id}/cafe:
    get:
      operationId: RolesController_getAllUserCafeRoles
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: number
      responses:
        '200':
          description: User café roles
      security:
        - X-HTTP-TOKEN: []
      summary: Get all user café roles
      tags:
        - roles
  /roles/user/{id}/cafe/{cafeId}:
    get:
      operationId: RolesController_getUserCafeRoles
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: number
        - name: cafeId
          required: true
          in: path
          description: Café ID
          schema:
            type: number
      responses:
        '200':
          description: User café roles for specific café
      security:
        - X-HTTP-TOKEN: []
      summary: Get user café roles for specific café
      tags:
        - roles
  /examples/admin-only:
    get:
      operationId: ExamplesController_getAdminOnlyContent
      parameters: []
      responses:
        '200':
          description: Admin-only content
      security:
        - X-HTTP-TOKEN: []
      summary: Example endpoint for global admins only
      tags:
        - examples
  /examples/editors-and-admins:
    get:
      operationId: ExamplesController_getEditorContent
      parameters: []
      responses:
        '200':
          description: Editor/Admin content
      security:
        - X-HTTP-TOKEN: []
      summary: Example endpoint for editors and admins
      tags:
        - examples
  /examples/cafe/{cafeId}/barista-only:
    get:
      operationId: ExamplesController_getBaristaContent
      parameters:
        - name: cafeId
          required: true
          in: path
          description: Café ID
          schema:
            type: number
      responses:
        '200':
          description: Barista-only content
      security:
        - X-HTTP-TOKEN: []
      summary: Example endpoint for café baristas only
      tags:
        - examples
  /examples/cafe/{cafeId}/content-creators:
    get:
      operationId: ExamplesController_getContentCreatorAccess
      parameters:
        - name: cafeId
          required: true
          in: path
          description: Café ID
          schema:
            type: number
      responses:
        '200':
          description: Content creator access
      security:
        - X-HTTP-TOKEN: []
      summary: Example endpoint for café content creators
      tags:
        - examples
  /examples/cafe/{cafeId}/moderate:
    post:
      operationId: ExamplesController_moderateContent
      parameters:
        - name: cafeId
          required: true
          in: path
          description: Café ID
          schema:
            type: number
      responses:
        '200':
          description: Moderation action completed
      security:
        - X-HTTP-TOKEN: []
      summary: Example moderation endpoint with mixed roles
      tags:
        - examples
  /examples/public:
    get:
      operationId: ExamplesController_getPublicContent
      parameters: []
      responses:
        '200':
          description: Public content
      security:
        - X-HTTP-TOKEN: []
      summary: Example public endpoint (no roles required)
      tags:
        - examples
info:
  title: TechVerse Café API
  description: |-
    Backend API for TechVerse Café - A multilingual tech and media social platform

    ## Features
    - 🔐 JWT Authentication & Role-based Access Control
    - 🌍 Multi-language Support (Languages, Countries, Cities)
    - 📝 Content Management (Articles, Posts, Forums)
    - ☕ Community Management (Cafés - Discussion Groups)
    - 🎧 Podcast System (TalkTech Episodes & Playlists)
    - 🔖 Bookmarking System
    - 👥 User Profiles & Social Features

    ## Authentication
    Most endpoints require authentication using JWT tokens. Include the token in the `X-HTTP-TOKEN` header.

    ## Role-Based Access Control
    The platform uses a two-tier role system:
    - **Global Roles**: ADMIN, SUPERVISOR, EDITOR, MEMBER
    - **Café Roles**: BARISTA, THINKER, JOURNALIST, MEMBER

    ## Getting Started
    1. Register a new user account
    2. Login to receive JWT token
    3. Use the token in `X-HTTP-TOKEN` header for authenticated requests
    4. Explore the community features and create content

    ## Download API Specification
    - JSON Format: [/api/swagger.json](/api/swagger.json)
    - YAML Format: [/api/swagger.yaml](/api/swagger.yaml)
          
  version: 1.0.0
  contact:
    name: TechVerse Team
    url: https://techverse.cafe
    email: support@techverse.cafe
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags:
  - name: Authentication
    description: User authentication, registration, and profile management
  - name: Users
    description: User management, profiles, and social features
  - name: Articles
    description: Article creation, management, and publishing system
  - name: Posts
    description: Community posts, social interactions, and discussions
  - name: Cafés
    description: Discussion groups, communities, and café management
  - name: forums
    description: Q&A forum, discussions, and community engagement
  - name: podcasts
    description: TalkTech podcast episodes, playlists, and comments
  - name: bookmarks
    description: User saved items and bookmark management
  - name: languages
    description: Supported UI languages and internationalization
  - name: countries
    description: Countries and cities data for user locations
  - name: roles
    description: Role-based access control and permission management
  - name: examples
    description: Example endpoints demonstrating role-based access control
servers:
  - url: http://localhost:4040
    description: Development Server
  - url: https://api.techverse.cafe
    description: Production Server
components:
  securitySchemes:
    X-HTTP-TOKEN:
      type: apiKey
      in: header
      name: X-HTTP-TOKEN
      description: 'JWT token for authentication. Format: Bearer <token>'
  schemas:
    RegisterDto:
      type: object
      properties:
        email:
          type: string
          description: User email address
          example: user@techverse.com
        password:
          type: string
          description: User password (minimum 6 characters)
          example: password123
          minLength: 6
        username:
          type: string
          description: Username
          example: johndoe
        firstName:
          type: string
          description: User first name
          example: John
        lastName:
          type: string
          description: User last name
          example: Doe
        countryId:
          type: number
          description: Country ID
          example: 1
        cityId:
          type: number
          description: City ID
          example: 1
        languageId:
          type: number
          description: Language ID for user interface
          example: 1
      required:
        - email
        - password
        - username
        - countryId
        - cityId
        - languageId
    AuthResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        user:
          type: object
          description: User information
      required:
        - accessToken
        - user
    LoginDto:
      type: object
      properties:
        email:
          type: string
          description: User email address
          example: user@techverse.com
        password:
          type: string
          description: User password
          example: password123
      required:
        - email
        - password
    UpdateUserDto:
      type: object
      properties:
        firstName:
          type: string
          description: User first name
          example: John
        lastName:
          type: string
          description: User last name
          example: Doe
        username:
          type: string
          description: Username
          example: johndoe
        bio:
          type: string
          description: User bio
          example: Tech enthusiast and developer
        avatar:
          type: string
          description: User avatar URL
          example: https://example.com/avatar.jpg
        countryId:
          type: number
          description: User country ID
          example: 1
        languageId:
          type: number
          description: User language ID
          example: 1
    UpdateUserRoleDto:
      type: object
      properties:
        role:
          type: string
          description: User role
          enum:
            - GUEST
            - MEMBER
            - THINKER
            - JOURNALIST
            - BARISTA
          example: THINKER
    CreateArticleDto:
      type: object
      properties:
        title:
          type: string
          description: Article title
          example: Getting Started with NestJS
        content:
          type: string
          description: Article content
          example: This is a comprehensive guide to NestJS...
        excerpt:
          type: string
          description: Article excerpt
          example: A brief introduction to NestJS framework
        featuredImage:
          type: string
          description: Featured image URL
          example: https://example.com/image.jpg
        categoryId:
          type: number
          description: Category ID
          example: 1
        tagIds:
          description: Array of tag IDs
          example:
            - 1
            - 2
            - 3
          type: array
          items:
            type: string
        isPublished:
          type: boolean
          description: Whether to publish immediately
          example: false
      required:
        - title
        - content
        - categoryId
    UpdateArticleDto:
      type: object
      properties:
        title:
          type: string
          description: Article title
          example: 'Updated: Getting Started with NestJS'
        content:
          type: string
          description: Article content
          example: Updated content for the NestJS guide...
        excerpt:
          type: string
          description: Article excerpt
          example: Updated brief introduction to NestJS framework
        featuredImage:
          type: string
          description: Featured image URL
          example: https://example.com/updated-image.jpg
        categoryId:
          type: number
          description: Category ID
          example: 2
        tagIds:
          description: Array of tag IDs
          example:
            - 1
            - 3
            - 4
          type: array
          items:
            type: string
        isPublished:
          type: boolean
          description: Whether the article is published
          example: true
    CreateCategoryDto:
      type: object
      properties:
        name:
          type: string
          description: Category name
          example: Web Development
        description:
          type: string
          description: Category description
          example: Articles about web development technologies
      required:
        - name
    CreateTagDto:
      type: object
      properties:
        name:
          type: string
          description: Tag name
          example: JavaScript
      required:
        - name
    CreatePostDto:
      type: object
      properties:
        content:
          type: string
          description: Post content in markdown or plain text
          example: 'Just discovered this amazing new JavaScript framework! Check it out: https://example.com'
        type:
          type: string
          description: Post type
          enum:
            - TEXT
            - IMAGE
            - VIDEO
            - LINK
          example: TEXT
        mediaUrl:
          type: string
          description: Media URL for image/video posts
          example: https://example.com/image.jpg
        linkUrl:
          type: string
          description: Link URL for link posts
          example: https://example.com/article
        isPublic:
          type: boolean
          description: Whether the post is public
          example: true
        cafes:
          description: Array of cafe IDs this post belongs to
          example:
            - 1
            - 2
          type: array
          items:
            type: number
        tags:
          description: Array of tag IDs for this post
          example:
            - 1
            - 2
            - 3
          type: array
          items:
            type: number
      required:
        - content
    UpdatePostDto:
      type: object
      properties:
        content:
          type: string
          description: Post content in markdown or plain text
          example: 'Just discovered this amazing new JavaScript framework! Check it out: https://example.com'
        type:
          type: string
          description: Post type
          enum:
            - TEXT
            - IMAGE
            - VIDEO
            - LINK
          example: TEXT
        mediaUrl:
          type: string
          description: Media URL for image/video posts
          example: https://example.com/image.jpg
        linkUrl:
          type: string
          description: Link URL for link posts
          example: https://example.com/article
        isPublic:
          type: boolean
          description: Whether the post is public
          example: true
        cafes:
          description: Array of cafe IDs this post belongs to
          example:
            - 1
            - 2
          type: array
          items:
            type: number
        tags:
          description: Array of tag IDs for this post
          example:
            - 1
            - 2
            - 3
          type: array
          items:
            type: number
    CreateCafeDto:
      type: object
      properties:
        name:
          type: string
          description: Cafe name
          example: JavaScript Developers
          minLength: 3
          maxLength: 100
        description:
          type: string
          description: Cafe description
          example: A community for JavaScript developers to share knowledge and discuss best practices
          maxLength: 500
        coverImage:
          type: string
          description: Cover image URL
          example: https://example.com/images/javascript-cafe.jpg
        isPrivate:
          type: boolean
          description: Whether the cafe is private
          example: false
      required:
        - name
    UpdateCafeDto:
      type: object
      properties:
        name:
          type: string
          description: Cafe name
          example: JavaScript Developers
          minLength: 3
          maxLength: 100
        description:
          type: string
          description: Cafe description
          example: A community for JavaScript developers to share knowledge and discuss best practices
          maxLength: 500
        coverImage:
          type: string
          description: Cover image URL
          example: https://example.com/images/javascript-cafe.jpg
        isPrivate:
          type: boolean
          description: Whether the cafe is private
          example: false
    CreateCafePostDto:
      type: object
      properties:
        content:
          type: string
          description: Post content
          example: What are your thoughts on the new JavaScript features in ES2025?
          minLength: 1
          maxLength: 2000
      required:
        - content
    UpdateCafePostDto:
      type: object
      properties:
        content:
          type: string
          description: Post content
          example: What are your thoughts on the new JavaScript features in ES2025?
          minLength: 1
          maxLength: 2000
    CreateForumDto:
      type: object
      properties:
        title:
          type: string
          description: Forum title
        description:
          type: string
          description: Forum description
        icon:
          type: string
          description: Forum icon URL
        color:
          type: string
          description: Forum color
        isPublic:
          type: boolean
          description: Is forum public
          default: true
        rules:
          type: string
          description: Forum rules
        tags:
          description: Forum tags
          type: array
          items:
            type: string
      required:
        - title
        - isPublic
    UpdateForumDto:
      type: object
      properties:
        title:
          type: string
          description: Forum title
        description:
          type: string
          description: Forum description
        icon:
          type: string
          description: Forum icon URL
        color:
          type: string
          description: Forum color
        isPublic:
          type: boolean
          description: Is forum public
          default: true
        rules:
          type: string
          description: Forum rules
        tags:
          description: Forum tags
          type: array
          items:
            type: string
    CreatePlaylistDto:
      type: object
      properties:
        title:
          type: string
          description: Playlist title
          example: TechVerse Daily Talks
        description:
          type: string
          description: Playlist description
          example: Daily technology discussions and insights
        coverImage:
          type: string
          description: Playlist cover image URL
          example: https://example.com/cover.jpg
        isPublic:
          type: boolean
          description: Whether the playlist is public
          default: true
      required:
        - title
    UpdatePlaylistDto:
      type: object
      properties:
        title:
          type: string
          description: Playlist title
          example: Updated Playlist Title
        description:
          type: string
          description: Playlist description
          example: Updated description
        coverImage:
          type: string
          description: Playlist cover image URL
          example: https://example.com/new-cover.jpg
        isPublic:
          type: boolean
          description: Whether the playlist is public
    CreateEpisodeDto:
      type: object
      properties:
        title:
          type: string
          description: Episode title
          example: Introduction to React Hooks
        description:
          type: string
          description: Episode description
          example: A comprehensive guide to React Hooks and their usage
        videoUrl:
          type: string
          description: Video URL for the episode
          example: https://youtube.com/watch?v=abc123
        thumbnail:
          type: string
          description: Episode thumbnail URL
          example: https://example.com/thumbnail.jpg
        duration:
          type: number
          description: Episode duration in seconds
          example: 1800
        playlistId:
          type: number
          description: Playlist ID
          example: 1
        orderIndex:
          type: number
          description: Order index within the playlist
          default: 0
        isPublished:
          type: boolean
          description: Whether the episode is published
          default: true
      required:
        - title
        - videoUrl
        - playlistId
    UpdateEpisodeDto:
      type: object
      properties:
        title:
          type: string
          description: Episode title
          example: Updated Episode Title
        description:
          type: string
          description: Episode description
          example: Updated description
        videoUrl:
          type: string
          description: Video URL for the episode
          example: https://youtube.com/watch?v=updated123
        thumbnail:
          type: string
          description: Episode thumbnail URL
          example: https://example.com/new-thumbnail.jpg
        duration:
          type: number
          description: Episode duration in seconds
          example: 2100
        orderIndex:
          type: number
          description: Order index within the playlist
        isPublished:
          type: boolean
          description: Whether the episode is published
    CreateEpisodeCommentDto:
      type: object
      properties:
        content:
          type: string
          description: Comment content
          example: Great episode! Very informative.
      required:
        - content
    UpdateEpisodeCommentDto:
      type: object
      properties:
        content:
          type: string
          description: Updated comment content
          example: Updated comment text
      required:
        - content
    CreateBookmarkDto:
      type: object
      properties:
        type:
          type: string
          description: Type of bookmark
          enum:
            - ARTICLE
            - POST
          example: ARTICLE
        articleId:
          type: number
          description: Article ID (required if type is ARTICLE)
          example: 1
        postId:
          type: number
          description: Post ID (required if type is POST)
          example: 1
      required:
        - type
    CreateGlobalRoleDto:
      type: object
      properties:
        name:
          type: string
          description: Role name
          example: ADMIN
        description:
          type: string
          description: Role description
          example: System administrator with full access
      required:
        - name
    CreateCafeRoleDto:
      type: object
      properties:
        name:
          type: string
          description: Café role name
          example: MODERATOR
        description:
          type: string
          description: Café role description
          example: Café moderator with content management privileges
      required:
        - name
    AssignGlobalRoleDto:
      type: object
      properties:
        roleId:
          type: number
          description: Global role ID to assign
          example: 1
      required:
        - roleId
    AssignCafeRoleDto:
      type: object
      properties:
        userId:
          type: number
          description: User ID to assign role to
          example: 1
        roleId:
          type: number
          description: Café role ID to assign
          example: 1
      required:
        - userId
        - roleId
