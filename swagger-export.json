{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "User already exists"
          }
        },
        "summary": "Register a new user",
        "tags": [
          "🔐 Authentication"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Login user",
        "tags": [
          "🔐 Authentication"
        ]
      }
    },
    "/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "🔐 Authentication"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get all users (Admin only)",
        "tags": [
          "👥 Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get user by ID",
        "tags": [
          "👥 Users"
        ]
      },
      "delete": {
        "operationId": "UsersController_deactivateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deactivated successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Deactivate user",
        "tags": [
          "👥 Users"
        ]
      }
    },
    "/users/profile": {
      "get": {
        "operationId": "UsersController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "👥 Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Update own profile",
        "tags": [
          "👥 Users"
        ]
      }
    },
    "/users/{id}/role": {
      "patch": {
        "operationId": "UsersController_updateRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role updated successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Update user role (Admin only)",
        "tags": [
          "👥 Users"
        ]
      }
    },
    "/users/leaderboard/xp": {
      "get": {
        "operationId": "UsersController_getLeaderboard",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leaderboard retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get XP leaderboard",
        "tags": [
          "👥 Users"
        ]
      }
    },
    "/articles": {
      "post": {
        "operationId": "ArticlesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateArticleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Article created successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Create new article (Journalists/Baristas only)",
        "tags": [
          "📝 Articles"
        ]
      },
      "get": {
        "operationId": "ArticlesController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "tagId",
            "required": false,
            "in": "query",
            "description": "Filter by tag ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in title and content",
            "schema": {
              "example": "nestjs",
              "type": "string"
            }
          },
          {
            "name": "isPublished",
            "required": false,
            "in": "query",
            "description": "Filter by published status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "isAI",
            "required": false,
            "in": "query",
            "description": "Filter by AI-generated content",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by scheduled status: \"scheduled\", \"published\", \"draft\"",
            "schema": {
              "example": "published",
              "type": "string"
            }
          },
          {
            "name": "featured",
            "required": false,
            "in": "query",
            "description": "Filter featured articles only",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "thisWeek",
            "required": false,
            "in": "query",
            "description": "Show articles from this week only",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "languageCode",
            "required": false,
            "in": "query",
            "description": "Filter by language code (ISO 639-1)",
            "schema": {
              "example": "en",
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "required": false,
            "in": "query",
            "description": "Filter by country code (ISO 3166-1 alpha-2)",
            "schema": {
              "example": "US",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Articles retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get all articles (Public)",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/{id}": {
      "get": {
        "operationId": "ArticlesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article retrieved successfully"
          },
          "404": {
            "description": "Article not found"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get article by ID",
        "tags": [
          "📝 Articles"
        ]
      },
      "patch": {
        "operationId": "ArticlesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article updated successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Update article (Author only)",
        "tags": [
          "📝 Articles"
        ]
      },
      "delete": {
        "operationId": "ArticlesController_deleteArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article deleted successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Delete article (Author/Barista only)",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/slug/{slug}": {
      "get": {
        "operationId": "ArticlesController_findBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article retrieved successfully"
          },
          "404": {
            "description": "Article not found"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get article by slug (Public)",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/{id}/bookmark": {
      "post": {
        "operationId": "ArticlesController_bookmarkArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Article bookmarked successfully"
          },
          "409": {
            "description": "Article already bookmarked"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Bookmark an article",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/categories": {
      "post": {
        "operationId": "ArticlesController_createCategory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Create new category (Baristas only)",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/categories/all": {
      "get": {
        "operationId": "ArticlesController_findAllCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get all categories (Public)",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/tags": {
      "post": {
        "operationId": "ArticlesController_createTag",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag created successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Create new tag (Baristas only)",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/tags/all": {
      "get": {
        "operationId": "ArticlesController_findAllTags",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tags retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get all tags (Public)",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/ai/generate": {
      "post": {
        "operationId": "ArticlesController_generateArticleWithAI",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIGenerateArticleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AI article generated and created successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Generate article using AI (Journalists/Baristas only)",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/ai/suggestions": {
      "get": {
        "operationId": "ArticlesController_getContentSuggestions",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AI content suggestions retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get AI content suggestions",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/{id}/schedule": {
      "post": {
        "operationId": "ArticlesController_scheduleArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Article scheduled successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Schedule article for future publishing",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/scheduled": {
      "get": {
        "operationId": "ArticlesController_getScheduledPosts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Scheduled posts retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get user scheduled posts",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/scheduled/{scheduleId}": {
      "delete": {
        "operationId": "ArticlesController_cancelScheduledPost",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled post canceled successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Cancel scheduled post",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/{id}/boost": {
      "post": {
        "operationId": "ArticlesController_boostArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Article boosted successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Boost article visibility with TechCoin",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/{id}/boosts": {
      "get": {
        "operationId": "ArticlesController_getArticleBoosts",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article boosts retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get article boosts",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/boosts/my": {
      "get": {
        "operationId": "ArticlesController_getUserBoosts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User boosts retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get user boosts",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/{id}/enhance": {
      "post": {
        "operationId": "ArticlesController_enhanceArticleWithAI",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Article enhanced with AI successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Enhance article with AI",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/enhancements/{enhancementId}/apply": {
      "post": {
        "operationId": "ArticlesController_applyAIEnhancement",
        "parameters": [
          {
            "name": "enhancementId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AI enhancement applied successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Apply AI enhancement to article",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/articles/{id}/enhancements": {
      "get": {
        "operationId": "ArticlesController_getArticleEnhancements",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article enhancements retrieved successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get article AI enhancements",
        "tags": [
          "📝 Articles"
        ]
      }
    },
    "/ai/providers": {
      "get": {
        "operationId": "AIKeysController_getProviders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of AI providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AIProviderResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all AI providers",
        "tags": [
          "🤖 AI"
        ]
      }
    },
    "/ai/providers/enum": {
      "get": {
        "operationId": "AIController_getProviderEnum",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All possible AI provider values"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get AI provider enum values",
        "tags": [
          "🤖 AI"
        ]
      }
    },
    "/ai/keys": {
      "get": {
        "operationId": "AIKeysController_getUserKeys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of user AI keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AIKeyResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user AI keys",
        "tags": [
          "🤖 AI"
        ]
      },
      "post": {
        "operationId": "AIKeysController_createUserKey",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAIKeyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AI key created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIKeyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new AI key",
        "tags": [
          "🤖 AI"
        ]
      }
    },
    "/ai/keys/{id}": {
      "put": {
        "operationId": "AIKeysController_updateUserKey",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "AI key ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAIKeyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AI key updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIKeyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update AI key",
        "tags": [
          "🤖 AI"
        ]
      },
      "delete": {
        "operationId": "AIKeysController_deleteUserKey",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "AI key ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AI key deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete AI key",
        "tags": [
          "🤖 AI"
        ]
      }
    },
    "/ai/admin/system-keys": {
      "get": {
        "operationId": "AIKeysController_getSystemKeys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of system AI keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AIKeyResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all system AI keys (Admin only)",
        "tags": [
          "🤖 AI"
        ]
      },
      "post": {
        "operationId": "AIKeysController_createSystemKey",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAIKeyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "System AI key created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIKeyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create system AI key (Admin only)",
        "tags": [
          "🤖 AI"
        ]
      }
    },
    "/ai/admin/system-keys/{id}": {
      "put": {
        "operationId": "AIKeysController_updateSystemKey",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "System AI key ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAIKeyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "System AI key updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIKeyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update system AI key (Admin only)",
        "tags": [
          "🤖 AI"
        ]
      },
      "delete": {
        "operationId": "AIKeysController_deleteSystemKey",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "System AI key ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System AI key deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete system AI key (Admin only)",
        "tags": [
          "🤖 AI"
        ]
      }
    },
    "/cafes": {
      "post": {
        "description": "Create a new café community. Costs 50 TechCoin to create.",
        "operationId": "CafesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCafeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Café created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 15,
                    "name": "JavaScript Developers",
                    "description": "A community for JS developers to share and learn",
                    "slug": "javascript-developers",
                    "isPrivate": false,
                    "memberCount": 1,
                    "createdBy": {
                      "id": 123,
                      "username": "johndoe"
                    },
                    "createdAt": "2025-07-16T15:00:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Insufficient TechCoin balance (50 TechCoin required)"
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new café",
        "tags": [
          "☕ Cafés"
        ]
      },
      "get": {
        "operationId": "CafesController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search cafes by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPrivate",
            "required": false,
            "in": "query",
            "description": "Filter by private/public cafes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ownerId",
            "required": false,
            "in": "query",
            "description": "Filter by owner ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "popular",
            "required": false,
            "in": "query",
            "description": "Show popular cafes only",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "languageCode",
            "required": false,
            "in": "query",
            "description": "Filter by language code (ISO 639-1)",
            "schema": {
              "example": "en",
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "required": false,
            "in": "query",
            "description": "Filter by country code (ISO 3166-1 alpha-2)",
            "schema": {
              "example": "US",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      }
    },
    "/cafes/{id}": {
      "get": {
        "operationId": "CafesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      },
      "patch": {
        "operationId": "CafesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCafeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      },
      "delete": {
        "operationId": "CafesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      }
    },
    "/cafes/slug/{slug}": {
      "get": {
        "operationId": "CafesController_findBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      }
    },
    "/cafes/{id}/join": {
      "post": {
        "operationId": "CafesController_joinCafe",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      }
    },
    "/cafes/{id}/leave": {
      "post": {
        "operationId": "CafesController_leaveCafe",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      }
    },
    "/cafes/{id}/posts": {
      "post": {
        "operationId": "CafesController_createPost",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCafePostDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      },
      "get": {
        "operationId": "CafesController_getCafePosts",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      }
    },
    "/cafes/posts/{postId}": {
      "patch": {
        "operationId": "CafesController_updateCafePost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCafePostDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      },
      "delete": {
        "operationId": "CafesController_deleteCafePost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "☕ Cafés"
        ]
      }
    },
    "/wallet": {
      "get": {
        "description": "Retrieve complete wallet information including TechCoin balance, XP, and recent transactions",
        "operationId": "WalletController_getWallet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Wallet information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "userId": 123,
                    "techCoin": 250,
                    "xp": 850,
                    "createdAt": "2025-07-16T00:00:00Z",
                    "updatedAt": "2025-07-16T12:00:00Z",
                    "recentTransactions": [
                      {
                        "id": 5,
                        "type": "EARN",
                        "amount": 25,
                        "description": "Task completion reward",
                        "createdAt": "2025-07-16T10:30:00Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user wallet information",
        "tags": [
          "💰 Digital Wallet & TechCoin"
        ]
      }
    },
    "/wallet/buy": {
      "post": {
        "description": "Buy TechCoin using mock Stripe payment integration. 1 USD = 10 TechCoin",
        "operationId": "WalletController_buyTechCoin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyTechCoinDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TechCoin purchased successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "success": true,
                    "transaction": {
                      "id": 10,
                      "type": "BUY",
                      "amount": 100,
                      "description": "Purchased 100 TechCoin for $10.00",
                      "stripePaymentId": "pi_mock_12345",
                      "createdAt": "2025-07-16T12:30:00Z"
                    },
                    "wallet": {
                      "techCoin": 350,
                      "xp": 850
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Payment failed or invalid amount"
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Purchase TechCoin",
        "tags": [
          "💰 Digital Wallet & TechCoin"
        ]
      }
    },
    "/wallet/spend": {
      "post": {
        "description": "Spend TechCoin for various platform activities (joining challenges, creating cafes, etc.)",
        "operationId": "WalletController_spendTechCoin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpendTechCoinDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TechCoin spent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "success": true,
                    "transaction": {
                      "id": 11,
                      "type": "SPEND",
                      "amount": -50,
                      "description": "Joined challenge: Code Master",
                      "createdAt": "2025-07-16T12:45:00Z"
                    },
                    "remainingBalance": 300
                  }
                }
              }
            }
          },
          "400": {
            "description": "Insufficient TechCoin balance"
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Spend TechCoin",
        "tags": [
          "💰 Digital Wallet & TechCoin"
        ]
      }
    },
    "/wallet/earn": {
      "post": {
        "description": "Earn TechCoin through various activities (completing tasks, winning challenges, etc.)",
        "operationId": "WalletController_earnTechCoin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EarnTechCoinDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TechCoin earned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "success": true,
                    "transaction": {
                      "id": 12,
                      "type": "EARN",
                      "amount": 75,
                      "description": "Won challenge: Code Master",
                      "createdAt": "2025-07-16T13:00:00Z"
                    },
                    "newBalance": 375,
                    "xpGained": 25
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Earn TechCoin",
        "tags": [
          "💰 Digital Wallet & TechCoin"
        ]
      }
    },
    "/wallet/transactions": {
      "get": {
        "description": "Retrieve paginated transaction history for the user wallet",
        "operationId": "WalletController_getTransactionHistory",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 20, max: 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by transaction type",
            "schema": {
              "enum": [
                "BUY",
                "SPEND",
                "EARN"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "transactions": [
                      {
                        "id": 12,
                        "type": "EARN",
                        "amount": 75,
                        "description": "Won challenge: Code Master",
                        "createdAt": "2025-07-16T13:00:00Z"
                      },
                      {
                        "id": 11,
                        "type": "SPEND",
                        "amount": -50,
                        "description": "Joined challenge: Code Master",
                        "createdAt": "2025-07-16T12:45:00Z"
                      }
                    ],
                    "pagination": {
                      "page": 1,
                      "limit": 20,
                      "total": 25,
                      "totalPages": 2
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get transaction history",
        "tags": [
          "💰 Digital Wallet & TechCoin"
        ]
      }
    },
    "/wallet/balance": {
      "get": {
        "description": "Get current TechCoin balance and XP, optionally check if user has enough for a specific amount",
        "operationId": "WalletController_checkBalance",
        "parameters": [
          {
            "name": "amount",
            "required": false,
            "in": "query",
            "description": "Amount to check if user has enough TechCoin",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "balance": 375,
                    "xp": 875,
                    "hasEnough": true,
                    "requiredAmount": 100
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check wallet balance",
        "tags": [
          "💰 Digital Wallet & TechCoin"
        ]
      }
    },
    "/bookmarks": {
      "post": {
        "description": "Add an article to user bookmarks for easy access later",
        "operationId": "BookmarksController_createBookmark",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookmarkDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Article bookmarked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 15,
                    "userId": 123,
                    "articleId": 45,
                    "createdAt": "2025-07-16T12:00:00Z",
                    "article": {
                      "id": 45,
                      "title": "Complete Guide to React Hooks",
                      "slug": "complete-guide-react-hooks",
                      "excerpt": "Learn everything about React Hooks...",
                      "featuredImage": "https://example.com/image.jpg",
                      "publishedAt": "2025-07-15T10:00:00Z",
                      "author": {
                        "id": 67,
                        "username": "johndoe",
                        "avatar": null
                      },
                      "category": {
                        "id": 3,
                        "name": "Programming",
                        "slug": "programming"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article not found"
          },
          "409": {
            "description": "Article already bookmarked"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bookmark an article",
        "tags": [
          "🔖 Bookmarks (Articles Only)"
        ]
      },
      "get": {
        "description": "Retrieve all bookmarked articles with pagination",
        "operationId": "BookmarksController_getBookmarks",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmarks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "bookmarks": [
                      {
                        "id": 15,
                        "userId": 123,
                        "articleId": 45,
                        "createdAt": "2025-07-16T12:00:00Z",
                        "article": {
                          "id": 45,
                          "title": "Complete Guide to React Hooks",
                          "slug": "complete-guide-react-hooks",
                          "excerpt": "Learn everything about React Hooks..."
                        }
                      }
                    ],
                    "pagination": {
                      "total": 25,
                      "page": 1,
                      "limit": 10,
                      "totalPages": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user bookmarks",
        "tags": [
          "🔖 Bookmarks (Articles Only)"
        ]
      }
    },
    "/bookmarks/stats": {
      "get": {
        "description": "Get total count of bookmarked articles",
        "operationId": "BookmarksController_getBookmarkStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bookmark stats retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 25,
                    "articles": 25
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get bookmark statistics",
        "tags": [
          "🔖 Bookmarks (Articles Only)"
        ]
      }
    },
    "/bookmarks/{id}": {
      "get": {
        "description": "Retrieve specific bookmark details by ID",
        "operationId": "BookmarksController_getBookmark",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmark retrieved successfully"
          },
          "404": {
            "description": "Bookmark not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get bookmark by ID",
        "tags": [
          "🔖 Bookmarks (Articles Only)"
        ]
      },
      "delete": {
        "description": "Remove bookmark from user collection",
        "operationId": "BookmarksController_deleteBookmark",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmark deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Bookmark deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bookmark not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete bookmark by ID",
        "tags": [
          "🔖 Bookmarks (Articles Only)"
        ]
      }
    },
    "/bookmarks/article/{articleId}": {
      "delete": {
        "description": "Remove specific article from bookmarks by article ID",
        "operationId": "BookmarksController_removeArticleBookmark",
        "parameters": [
          {
            "name": "articleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article bookmark removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Article bookmark removed successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bookmark not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove article bookmark",
        "tags": [
          "🔖 Bookmarks (Articles Only)"
        ]
      }
    },
    "/languages": {
      "get": {
        "operationId": "LanguagesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of supported UI languages",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 1,
                    "name": "English",
                    "nativeName": "English",
                    "code": "en",
                    "direction": "ltr",
                    "createdAt": "2025-01-01T00:00:00.000Z",
                    "updatedAt": "2025-01-01T00:00:00.000Z"
                  }
                ]
              }
            }
          }
        },
        "summary": "Get all supported languages",
        "tags": [
          "🌍 Languages"
        ]
      }
    },
    "/countries": {
      "get": {
        "operationId": "CountriesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of countries with default language",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 1,
                    "name": "United States",
                    "code": "US",
                    "languageId": 1,
                    "language": {
                      "id": 1,
                      "name": "English",
                      "nativeName": "English",
                      "code": "en",
                      "direction": "ltr"
                    },
                    "createdAt": "2025-01-01T00:00:00.000Z",
                    "updatedAt": "2025-01-01T00:00:00.000Z"
                  }
                ]
              }
            }
          }
        },
        "summary": "Get all countries",
        "tags": [
          "🗺️ Countries"
        ]
      }
    },
    "/countries/{id}/cities": {
      "get": {
        "operationId": "CountriesController_findCitiesByCountry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Country ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cities in the country",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 1,
                    "name": "New York",
                    "countryId": 1,
                    "createdAt": "2025-01-01T00:00:00.000Z",
                    "updatedAt": "2025-01-01T00:00:00.000Z"
                  }
                ]
              }
            }
          }
        },
        "summary": "Get cities by country",
        "tags": [
          "🗺️ Countries"
        ]
      }
    },
    "/roles/global": {
      "get": {
        "operationId": "RolesController_getGlobalRoles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of global roles"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get all global roles",
        "tags": [
          "🛡️ Roles"
        ]
      },
      "post": {
        "operationId": "RolesController_createGlobalRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGlobalRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Global role created successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Create a new global role",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/roles/cafe": {
      "get": {
        "operationId": "RolesController_getCafeRoles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of café roles"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get all café roles",
        "tags": [
          "🛡️ Roles"
        ]
      },
      "post": {
        "operationId": "RolesController_createCafeRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCafeRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Café role created successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Create a new café role",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/roles/user/{id}/assign-global-role": {
      "post": {
        "operationId": "RolesController_assignGlobalRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignGlobalRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Global role assigned successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Assign global role to user",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/roles/user/{id}/remove-global-role/{roleId}": {
      "delete": {
        "operationId": "RolesController_removeGlobalRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "description": "Role ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Global role removed successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Remove global role from user",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/roles/cafe/{cafeId}/assign-role": {
      "post": {
        "operationId": "RolesController_assignCafeRole",
        "parameters": [
          {
            "name": "cafeId",
            "required": true,
            "in": "path",
            "description": "Café ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignCafeRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Café role assigned successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Assign café role to user",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/roles/cafe/{cafeId}/remove-role/{userId}/{roleId}": {
      "delete": {
        "operationId": "RolesController_removeCafeRole",
        "parameters": [
          {
            "name": "cafeId",
            "required": true,
            "in": "path",
            "description": "Café ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "description": "Role ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Café role removed successfully"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Remove café role from user",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/roles/user/{id}/global": {
      "get": {
        "operationId": "RolesController_getUserGlobalRoles",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User global roles"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get user global roles",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/roles/user/{id}/cafe": {
      "get": {
        "operationId": "RolesController_getAllUserCafeRoles",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User café roles"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get all user café roles",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/roles/user/{id}/cafe/{cafeId}": {
      "get": {
        "operationId": "RolesController_getUserCafeRoles",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cafeId",
            "required": true,
            "in": "path",
            "description": "Café ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User café roles for specific café"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Get user café roles for specific café",
        "tags": [
          "🛡️ Roles"
        ]
      }
    },
    "/examples/admin-only": {
      "get": {
        "operationId": "ExamplesController_getAdminOnlyContent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Admin-only content"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Example endpoint for global admins only",
        "tags": [
          "📋 Examples"
        ]
      }
    },
    "/examples/editors-and-admins": {
      "get": {
        "operationId": "ExamplesController_getEditorContent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Editor/Admin content"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Example endpoint for editors and admins",
        "tags": [
          "📋 Examples"
        ]
      }
    },
    "/examples/cafe/{cafeId}/barista-only": {
      "get": {
        "operationId": "ExamplesController_getBaristaContent",
        "parameters": [
          {
            "name": "cafeId",
            "required": true,
            "in": "path",
            "description": "Café ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Barista-only content"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Example endpoint for café baristas only",
        "tags": [
          "📋 Examples"
        ]
      }
    },
    "/examples/cafe/{cafeId}/content-creators": {
      "get": {
        "operationId": "ExamplesController_getContentCreatorAccess",
        "parameters": [
          {
            "name": "cafeId",
            "required": true,
            "in": "path",
            "description": "Café ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content creator access"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Example endpoint for café content creators",
        "tags": [
          "📋 Examples"
        ]
      }
    },
    "/examples/cafe/{cafeId}/moderate": {
      "post": {
        "operationId": "ExamplesController_moderateContent",
        "parameters": [
          {
            "name": "cafeId",
            "required": true,
            "in": "path",
            "description": "Café ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Moderation action completed"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Example moderation endpoint with mixed roles",
        "tags": [
          "📋 Examples"
        ]
      }
    },
    "/examples/public": {
      "get": {
        "operationId": "ExamplesController_getPublicContent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Public content"
          }
        },
        "security": [
          {
            "X-HTTP-TOKEN": []
          }
        ],
        "summary": "Example public endpoint (no roles required)",
        "tags": [
          "📋 Examples"
        ]
      }
    },
    "/api/info": {
      "get": {
        "description": "Returns basic information about the TechVerse Café API including available endpoints and authentication requirements",
        "operationId": "ApiDocumentationController_getApiInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "TechVerse Café API"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "description": {
                      "type": "string"
                    },
                    "documentation": {
                      "type": "string",
                      "example": "/api/docs"
                    },
                    "downloads": {
                      "type": "object",
                      "properties": {
                        "json": {
                          "type": "string",
                          "example": "/api/swagger.json"
                        }
                      }
                    },
                    "features": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "authentication": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "JWT"
                        },
                        "header": {
                          "type": "string",
                          "example": "X-HTTP-TOKEN"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get API information and available endpoints",
        "tags": [
          "API Documentation"
        ]
      }
    },
    "/scheduler/publish": {
      "get": {
        "operationId": "SchedulerController_publishScheduledContent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Scheduled content publishing triggered"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Manually trigger publishing of scheduled content",
        "tags": [
          "⚙️ System"
        ]
      }
    },
    "/scheduler/scheduled": {
      "get": {
        "operationId": "SchedulerController_getScheduledContent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of scheduled articles"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all scheduled content",
        "tags": [
          "⚙️ System"
        ]
      }
    },
    "/scheduler/articles/{id}/reschedule": {
      "post": {
        "operationId": "SchedulerController_rescheduleArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RescheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article rescheduled successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reschedule an article",
        "tags": [
          "⚙️ System"
        ]
      }
    },
    "/scheduler/articles/{id}/schedule": {
      "delete": {
        "operationId": "SchedulerController_cancelArticleSchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article schedule cancelled successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel scheduled article",
        "tags": [
          "⚙️ System"
        ]
      }
    },
    "/projects": {
      "post": {
        "description": "Create a new project to organize tasks and collaborations",
        "operationId": "ProjectsController_createProject",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 25,
                    "title": "TechVerse Mobile App",
                    "description": "React Native mobile application for TechVerse platform",
                    "isPrivate": false,
                    "status": "ACTIVE",
                    "createdBy": {
                      "id": 123,
                      "username": "johndoe"
                    },
                    "taskCount": 0,
                    "createdAt": "2025-07-16T15:30:00Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new project",
        "tags": [
          "�️ Projects"
        ]
      },
      "get": {
        "operationId": "ProjectsController_getProjects",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by project status",
            "schema": {
              "type": "string",
              "enum": [
                "OPEN",
                "IN_PROGRESS",
                "COMPLETED"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by title or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPublic",
            "required": false,
            "in": "query",
            "description": "Show only public projects",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all projects with pagination and filters",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/my-projects": {
      "get": {
        "operationId": "ProjectsController_getMyProjects",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User projects retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user projects",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/my-applications": {
      "get": {
        "operationId": "ProjectsController_getMyApplications",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User applications retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user task applications",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/my-tasks": {
      "get": {
        "operationId": "ProjectsController_getMyTasks",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User assigned tasks retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user assigned tasks",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/{id}": {
      "get": {
        "operationId": "ProjectsController_getProject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully"
          },
          "403": {
            "description": "Project is private"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get project by ID",
        "tags": [
          "�️ Projects"
        ]
      },
      "patch": {
        "operationId": "ProjectsController_updateProject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully"
          },
          "403": {
            "description": "Only project owner can update"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update project",
        "tags": [
          "�️ Projects"
        ]
      },
      "delete": {
        "operationId": "ProjectsController_deleteProject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully"
          },
          "400": {
            "description": "Cannot delete project with active tasks"
          },
          "403": {
            "description": "Only project owner can delete"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete project",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/{id}/tasks": {
      "post": {
        "operationId": "ProjectsController_createTask",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully"
          },
          "403": {
            "description": "Only project owner can add tasks"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a task for a project",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/tasks/all": {
      "get": {
        "operationId": "ProjectsController_getAllTasks",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by task status",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "ASSIGNED",
                "DONE"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by title or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minPrice",
            "required": false,
            "in": "query",
            "description": "Filter by price range - minimum",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxPrice",
            "required": false,
            "in": "query",
            "description": "Filter by price range - maximum",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all tasks with pagination and filters",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/tasks/{id}": {
      "get": {
        "operationId": "ProjectsController_getTask",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully"
          },
          "403": {
            "description": "Task belongs to private project"
          },
          "404": {
            "description": "Task not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get task by ID",
        "tags": [
          "�️ Projects"
        ]
      },
      "patch": {
        "operationId": "ProjectsController_updateTask",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully"
          },
          "400": {
            "description": "Cannot change status of assigned task"
          },
          "403": {
            "description": "Only project owner can update task"
          },
          "404": {
            "description": "Task not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update task",
        "tags": [
          "�️ Projects"
        ]
      },
      "delete": {
        "operationId": "ProjectsController_deleteTask",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted successfully"
          },
          "400": {
            "description": "Cannot delete assigned or paid task"
          },
          "403": {
            "description": "Only project owner can delete task"
          },
          "404": {
            "description": "Task not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete task",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/tasks/{id}/apply": {
      "post": {
        "operationId": "ProjectsController_applyToTask",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyToTaskDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Application submitted successfully"
          },
          "400": {
            "description": "Cannot apply to own task or task not accepting applications"
          },
          "404": {
            "description": "Task not found"
          },
          "409": {
            "description": "Already applied or task assigned"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Apply to a task",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/tasks/{taskId}/assign/{applicantId}": {
      "post": {
        "operationId": "ProjectsController_assignTask",
        "parameters": [
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "applicantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Task assigned successfully"
          },
          "400": {
            "description": "User has not applied or insufficient balance"
          },
          "403": {
            "description": "Only project owner can assign tasks"
          },
          "404": {
            "description": "Task not found"
          },
          "409": {
            "description": "Task already assigned"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Assign task to an applicant",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/projects/tasks/{id}/complete": {
      "post": {
        "operationId": "ProjectsController_completeTask",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task completed and payment processed"
          },
          "400": {
            "description": "Task not assigned or already completed"
          },
          "403": {
            "description": "Only project owner can complete tasks"
          },
          "404": {
            "description": "Task not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Complete task and process payment",
        "tags": [
          "�️ Projects"
        ]
      }
    },
    "/challenges": {
      "post": {
        "description": "Create a programming/design challenge with TechCoin rewards. Requires TechCoin for reward pool.",
        "operationId": "ChallengesController_createChallenge",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChallengeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Challenge created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 10,
                    "title": "Code Master Challenge",
                    "description": "Build a web app using React and Node.js",
                    "reward": 100,
                    "entryFee": 25,
                    "type": "VOTE",
                    "status": "ACTIVE",
                    "startDate": "2025-07-20T00:00:00Z",
                    "endDate": "2025-07-27T23:59:59Z",
                    "createdBy": {
                      "id": 123,
                      "username": "johndoe",
                      "avatar": null
                    },
                    "participantCount": 0,
                    "createdAt": "2025-07-16T14:00:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Insufficient TechCoin for reward pool"
          },
          "401": {
            "description": "Unauthorized - JWT token required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new challenge",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      },
      "get": {
        "description": "Retrieve paginated list of all challenges with filtering options",
        "operationId": "ChallengesController_getAllChallenges",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 10)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by challenge status",
            "schema": {
              "enum": [
                "ACTIVE",
                "COMPLETED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by challenge type",
            "schema": {
              "enum": [
                "VOTE",
                "JUDGE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Challenges retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "challenges": [
                      {
                        "id": 10,
                        "title": "Code Master Challenge",
                        "description": "Build a web app using React and Node.js",
                        "reward": 100,
                        "entryFee": 25,
                        "type": "VOTE",
                        "status": "ACTIVE",
                        "participantCount": 5,
                        "startDate": "2025-07-20T00:00:00Z",
                        "endDate": "2025-07-27T23:59:59Z",
                        "createdBy": {
                          "id": 123,
                          "username": "johndoe"
                        }
                      }
                    ],
                    "pagination": {
                      "page": 1,
                      "limit": 10,
                      "total": 25,
                      "totalPages": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all challenges",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      }
    },
    "/challenges/my-created": {
      "get": {
        "operationId": "ChallengesController_getMyCreatedChallenges",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User created challenges retrieved"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get challenges created by current user",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      }
    },
    "/challenges/my-participated": {
      "get": {
        "operationId": "ChallengesController_getMyParticipatedChallenges",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User participated challenges retrieved"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get challenges user participated in",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      }
    },
    "/challenges/{id}": {
      "get": {
        "operationId": "ChallengesController_getChallengeById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Challenge retrieved successfully"
          },
          "404": {
            "description": "Challenge not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get challenge by ID",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      }
    },
    "/challenges/{id}/join": {
      "post": {
        "operationId": "ChallengesController_joinChallenge",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinChallengeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Joined challenge successfully"
          },
          "400": {
            "description": "Cannot join challenge"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Join a challenge",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      }
    },
    "/challenges/{id}/submit": {
      "post": {
        "operationId": "ChallengesController_submitSolution",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitChallengeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Solution submitted successfully"
          },
          "404": {
            "description": "Not a participant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit solution to challenge",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      }
    },
    "/challenges/{id}/vote/{participantId}": {
      "post": {
        "operationId": "ChallengesController_voteForParticipant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "participantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vote recorded successfully"
          },
          "403": {
            "description": "Not authorized to vote"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Vote for a participant",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      }
    },
    "/challenges/{id}/close": {
      "post": {
        "operationId": "ChallengesController_closeChallenge",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Challenge closed successfully"
          },
          "403": {
            "description": "Only creator can close challenge"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Close challenge and determine winner",
        "tags": [
          "🏆 Challenges & Competitions"
        ]
      }
    },
    "/reactions": {
      "post": {
        "operationId": "ReactionsController_addReaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReactionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reaction added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReactionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid content ID or missing required fields"
          },
          "404": {
            "description": "Content not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add or update a reaction",
        "tags": [
          "🎭 Reactions"
        ]
      },
      "get": {
        "operationId": "ReactionsController_getContentReactions",
        "parameters": [
          {
            "name": "articleId",
            "required": false,
            "in": "query",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "challengeId",
            "required": false,
            "in": "query",
            "description": "Challenge ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cafePostId",
            "required": false,
            "in": "query",
            "description": "Cafe Post ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reactions"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get reactions for content",
        "tags": [
          "🎭 Reactions"
        ]
      }
    },
    "/reactions/article/{articleId}": {
      "delete": {
        "operationId": "ReactionsController_removeArticleReaction",
        "parameters": [
          {
            "name": "articleId",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction removed successfully"
          },
          "404": {
            "description": "Reaction not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove reaction from article",
        "tags": [
          "🎭 Reactions"
        ]
      }
    },
    "/reactions/project/{projectId}": {
      "delete": {
        "operationId": "ReactionsController_removeProjectReaction",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction removed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove reaction from project",
        "tags": [
          "🎭 Reactions"
        ]
      }
    },
    "/reactions/challenge/{challengeId}": {
      "delete": {
        "operationId": "ReactionsController_removeChallengeReaction",
        "parameters": [
          {
            "name": "challengeId",
            "required": true,
            "in": "path",
            "description": "Challenge ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction removed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove reaction from challenge",
        "tags": [
          "🎭 Reactions"
        ]
      }
    },
    "/reactions/cafe-post/{cafePostId}": {
      "delete": {
        "operationId": "ReactionsController_removeCafePostReaction",
        "parameters": [
          {
            "name": "cafePostId",
            "required": true,
            "in": "path",
            "description": "Cafe Post ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction removed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove reaction from cafe post",
        "tags": [
          "🎭 Reactions"
        ]
      }
    },
    "/reactions/stats": {
      "get": {
        "operationId": "ReactionsController_getReactionStats",
        "parameters": [
          {
            "name": "articleId",
            "required": false,
            "in": "query",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "challengeId",
            "required": false,
            "in": "query",
            "description": "Challenge ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cafePostId",
            "required": false,
            "in": "query",
            "description": "Cafe Post ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReactionStatsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get reaction statistics for content",
        "tags": [
          "🎭 Reactions"
        ]
      }
    }
  },
  "info": {
    "title": "TechVerse Café API",
    "description": "Backend API for TechVerse Café MVP - A tech community platform with digital economy\n\n## 🚀 New Features in MVP\n- � **Digital Wallet & TechCoin System**: Earn, buy, and spend TechCoin\n- � **Challenges & Competitions**: Community challenges with rewards\n- �️ **Enhanced Projects System**: Task management with payments\n- 🌍 **Multi-language Support**: Localized content and UI\n- ☕ **Café Communities**: Topic-based discussion groups\n\n## Core Features\n- � JWT Authentication & Role-based Access Control\n- 📝 Content Management (Articles, Posts)\n- 🔖 Bookmarking System\n- 👥 User Profiles & Social Features\n- 🤖 AI Integration for content generation\n\n## Authentication\nMost endpoints require authentication using JWT tokens. Include the token in the `X-HTTP-TOKEN` header.\n\n## Role-Based Access Control\nThe platform uses a two-tier role system:\n- **Global Roles**: ADMIN, SUPERVISOR, EDITOR, MEMBER\n- **Café Roles**: BARISTA, THINKER, JOURNALIST, MEMBER\n\n## Getting Started\n1. Register a new user account\n2. Login to receive JWT token\n3. Use the token in `X-HTTP-TOKEN` header for authenticated requests\n4. Create your wallet and start earning TechCoin\n5. Join challenges and participate in projects\n\n## Download API Specification\n- JSON Format: [/api/swagger.json](/api/swagger.json)\n- YAML Format: [/api/swagger.yaml](/api/swagger.yaml)\n      ",
    "version": "2.0.0",
    "contact": {
      "name": "TechVerse Team",
      "url": "https://techverse.cafe",
      "email": "support@techverse.cafe"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "🔐 Authentication",
      "description": "User authentication, registration, and profile management"
    },
    {
      "name": "👥 Users",
      "description": "User management, profiles, and social features"
    },
    {
      "name": "📝 Articles",
      "description": "Article creation, management, and publishing system"
    },
    {
      "name": "💬 Posts",
      "description": "Community posts, social interactions, and discussions"
    },
    {
      "name": "☕ Cafés",
      "description": "Discussion groups, communities, and café management"
    },
    {
      "name": "🛠️ Projects",
      "description": "Mini projects, tasks, and TechCoin payment system"
    },
    {
      "name": "💰 Digital Wallet & TechCoin",
      "description": "Wallet management, TechCoin transactions, and digital economy"
    },
    {
      "name": "🏆 Challenges & Competitions",
      "description": "Community challenges, competitions, and rewards system"
    },
    {
      "name": "🔖 Bookmarks",
      "description": "User saved items and bookmark management"
    },
    {
      "name": "🌍 Languages",
      "description": "Supported UI languages and internationalization"
    },
    {
      "name": "🗺️ Countries",
      "description": "Countries and cities data for user locations"
    },
    {
      "name": "🛡️ Roles",
      "description": "Role-based access control and permission management"
    },
    {
      "name": "🤖 AI",
      "description": "AI providers and intelligent content generation"
    },
    {
      "name": "⚙️ System",
      "description": "System utilities, scheduler, and administrative functions"
    },
    {
      "name": "📋 Examples",
      "description": "Example endpoints demonstrating role-based access control"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:4040",
      "description": "Development Server"
    },
    {
      "url": "https://api.techverse.cafe",
      "description": "Production Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "X-HTTP-TOKEN": {
        "type": "apiKey",
        "in": "header",
        "name": "X-HTTP-TOKEN",
        "description": "JWT token for authentication. Format: Bearer <token>"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@techverse.com"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 6 characters)",
            "example": "password123",
            "minLength": 6
          },
          "username": {
            "type": "string",
            "description": "Username",
            "example": "johndoe"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "countryId": {
            "type": "number",
            "description": "Country ID",
            "example": 1
          },
          "cityId": {
            "type": "number",
            "description": "City ID",
            "example": 1
          },
          "languageId": {
            "type": "number",
            "description": "Language ID for user interface",
            "example": 1
          }
        },
        "required": [
          "email",
          "password",
          "username",
          "countryId",
          "cityId",
          "languageId"
        ]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          },
          "user": {
            "type": "object",
            "description": "User information"
          }
        },
        "required": [
          "accessToken",
          "user"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@techverse.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "username": {
            "type": "string",
            "description": "Username",
            "example": "johndoe"
          },
          "bio": {
            "type": "string",
            "description": "User bio",
            "example": "Tech enthusiast and developer"
          },
          "avatar": {
            "type": "string",
            "description": "User avatar URL",
            "example": "https://example.com/avatar.jpg"
          },
          "countryId": {
            "type": "number",
            "description": "User country ID",
            "example": 1
          },
          "languageId": {
            "type": "number",
            "description": "User language ID",
            "example": 1
          }
        }
      },
      "UpdateUserRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "GUEST",
              "MEMBER",
              "THINKER",
              "JOURNALIST",
              "BARISTA"
            ],
            "example": "THINKER"
          }
        }
      },
      "CreateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Article title",
            "example": "Getting Started with NestJS"
          },
          "content": {
            "type": "string",
            "description": "Article content",
            "example": "This is a comprehensive guide to NestJS..."
          },
          "excerpt": {
            "type": "string",
            "description": "Article excerpt",
            "example": "A brief introduction to NestJS framework"
          },
          "featuredImage": {
            "type": "string",
            "description": "Featured image URL",
            "example": "https://example.com/image.jpg"
          },
          "categoryId": {
            "type": "number",
            "description": "Category ID",
            "example": 1
          },
          "tagIds": {
            "description": "Array of tag IDs",
            "example": [
              1,
              2,
              3
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isPublished": {
            "type": "boolean",
            "description": "Whether to publish immediately",
            "example": false
          },
          "scheduledFor": {
            "type": "string",
            "description": "Schedule publication for future date (ISO string)",
            "example": "2024-12-31T10:00:00Z"
          },
          "isAI": {
            "type": "boolean",
            "description": "Whether this article was generated by AI",
            "example": false
          },
          "aiPrompt": {
            "type": "string",
            "description": "AI prompt used to generate this article",
            "example": "Write an article about NestJS fundamentals"
          },
          "languageCode": {
            "type": "string",
            "description": "Language code for the article (ISO 639-1)",
            "example": "en"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code for the article (ISO 3166-1 alpha-2)",
            "example": "US"
          }
        },
        "required": [
          "title",
          "content",
          "categoryId"
        ]
      },
      "UpdateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Article title",
            "example": "Updated: Getting Started with NestJS"
          },
          "content": {
            "type": "string",
            "description": "Article content",
            "example": "Updated content for the NestJS guide..."
          },
          "excerpt": {
            "type": "string",
            "description": "Article excerpt",
            "example": "Updated brief introduction to NestJS framework"
          },
          "featuredImage": {
            "type": "string",
            "description": "Featured image URL",
            "example": "https://example.com/updated-image.jpg"
          },
          "categoryId": {
            "type": "number",
            "description": "Category ID",
            "example": 2
          },
          "tagIds": {
            "description": "Array of tag IDs",
            "example": [
              1,
              3,
              4
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isPublished": {
            "type": "boolean",
            "description": "Whether the article is published",
            "example": true
          },
          "scheduledFor": {
            "type": "string",
            "description": "Schedule publication for future date (ISO string)",
            "example": "2024-12-31T10:00:00Z"
          },
          "languageCode": {
            "type": "string",
            "description": "Language code for the article (ISO 639-1)",
            "example": "en"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code for the article (ISO 3166-1 alpha-2)",
            "example": "US"
          }
        }
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "Web Development"
          },
          "description": {
            "type": "string",
            "description": "Category description",
            "example": "Articles about web development technologies"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name",
            "example": "JavaScript"
          }
        },
        "required": [
          "name"
        ]
      },
      "AIGenerateArticleDto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Prompt for AI to generate article content",
            "example": "Write an article about modern JavaScript features and best practices"
          },
          "provider": {
            "type": "string",
            "description": "AI provider to use for generation",
            "enum": [
              "openai",
              "gemini",
              "claude"
            ],
            "example": "openai"
          },
          "topic": {
            "type": "string",
            "description": "Specific topic or focus area",
            "example": "ES2024 features"
          },
          "categoryId": {
            "type": "number",
            "description": "Category ID for the generated article",
            "example": 1
          },
          "tagIds": {
            "description": "Array of tag IDs to assign",
            "example": [
              1,
              2,
              3
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publishNow": {
            "type": "boolean",
            "description": "Whether to publish immediately or save as draft",
            "example": false
          },
          "scheduledFor": {
            "type": "string",
            "description": "Schedule publication for future date (ISO string)",
            "example": "2024-12-31T10:00:00Z"
          }
        },
        "required": [
          "prompt",
          "categoryId"
        ]
      },
      "AIProviderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Provider ID"
          },
          "name": {
            "type": "string",
            "description": "Provider name (slug)"
          },
          "label": {
            "type": "string",
            "description": "Provider display label"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether provider is active"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default provider"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "label",
          "isActive",
          "isDefault",
          "createdAt",
          "updatedAt"
        ]
      },
      "AIKeyResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "API key ID"
          },
          "providerId": {
            "type": "number",
            "description": "Provider ID"
          },
          "keyName": {
            "type": "string",
            "description": "Custom key name"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether key is active"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated timestamp"
          },
          "provider": {
            "type": "object",
            "description": "Provider information"
          }
        },
        "required": [
          "id",
          "providerId",
          "keyName",
          "isActive",
          "createdAt",
          "updatedAt",
          "provider"
        ]
      },
      "CreateAIKeyDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "number",
            "description": "ID of the AI provider",
            "example": 1
          },
          "secretKey": {
            "type": "string",
            "description": "The API key secret",
            "example": "sk-..."
          }
        },
        "required": [
          "providerId",
          "secretKey"
        ]
      },
      "UpdateAIKeyDto": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "description": "Updated API key secret",
            "example": "sk-..."
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the API key is active",
            "example": true
          }
        }
      },
      "CreateCafeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Cafe name",
            "example": "JavaScript Developers",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Cafe description",
            "example": "A community for JavaScript developers to share knowledge and discuss best practices",
            "maxLength": 500
          },
          "coverImage": {
            "type": "string",
            "description": "Cover image URL",
            "example": "https://example.com/images/javascript-cafe.jpg"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the cafe is private",
            "example": false
          },
          "languageCode": {
            "type": "string",
            "description": "Language code for the cafe (ISO 639-1)",
            "example": "en"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code for the cafe (ISO 3166-1 alpha-2)",
            "example": "US"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCafeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Cafe name",
            "example": "JavaScript Developers",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Cafe description",
            "example": "A community for JavaScript developers to share knowledge and discuss best practices",
            "maxLength": 500
          },
          "coverImage": {
            "type": "string",
            "description": "Cover image URL",
            "example": "https://example.com/images/javascript-cafe.jpg"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the cafe is private",
            "example": false
          },
          "languageCode": {
            "type": "string",
            "description": "Language code for the cafe (ISO 639-1)",
            "example": "en"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code for the cafe (ISO 3166-1 alpha-2)",
            "example": "US"
          }
        }
      },
      "CreateCafePostDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Post content",
            "example": "What are your thoughts on the new JavaScript features in ES2025?",
            "minLength": 1,
            "maxLength": 2000
          }
        },
        "required": [
          "content"
        ]
      },
      "UpdateCafePostDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Post content",
            "example": "What are your thoughts on the new JavaScript features in ES2025?",
            "minLength": 1,
            "maxLength": 2000
          }
        }
      },
      "BuyTechCoinDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount of TechCoin to purchase",
            "example": 100,
            "minimum": 1,
            "maximum": 10000
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method (mock for demo)",
            "example": "stripe",
            "default": "stripe"
          }
        },
        "required": [
          "amount"
        ]
      },
      "SpendTechCoinDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount of TechCoin to spend",
            "example": 50,
            "minimum": 1
          },
          "description": {
            "type": "string",
            "description": "Description of the spending transaction",
            "example": "Join challenge: Code Master",
            "maxLength": 255
          },
          "referenceId": {
            "type": "number",
            "description": "Reference ID for the transaction (challenge ID, cafe ID, etc.)",
            "example": 123
          },
          "category": {
            "type": "string",
            "description": "Type of spending activity",
            "example": "challenge_entry",
            "enum": [
              "challenge_entry",
              "cafe_creation",
              "task_escrow",
              "other"
            ]
          }
        },
        "required": [
          "amount",
          "description"
        ]
      },
      "EarnTechCoinDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount of TechCoin earned",
            "example": 25,
            "minimum": 1
          },
          "description": {
            "type": "string",
            "description": "Description of how the TechCoin was earned",
            "example": "Completed task: Fix login bug",
            "maxLength": 255
          },
          "xpReward": {
            "type": "number",
            "description": "XP points to award along with TechCoin",
            "example": 10,
            "default": 0
          },
          "referenceId": {
            "type": "number",
            "description": "Reference ID for the earning activity",
            "example": 456
          },
          "category": {
            "type": "string",
            "description": "Category of earning activity",
            "example": "task_completion",
            "enum": [
              "task_completion",
              "challenge_win",
              "bonus_reward",
              "other"
            ]
          }
        },
        "required": [
          "amount",
          "description"
        ]
      },
      "CreateBookmarkDto": {
        "type": "object",
        "properties": {
          "articleId": {
            "type": "number",
            "description": "Article ID to bookmark",
            "example": 1
          }
        },
        "required": [
          "articleId"
        ]
      },
      "CreateGlobalRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Role name",
            "example": "ADMIN"
          },
          "description": {
            "type": "string",
            "description": "Role description",
            "example": "System administrator with full access"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateCafeRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Café role name",
            "example": "MODERATOR"
          },
          "description": {
            "type": "string",
            "description": "Café role description",
            "example": "Café moderator with content management privileges"
          }
        },
        "required": [
          "name"
        ]
      },
      "AssignGlobalRoleDto": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "number",
            "description": "Global role ID to assign",
            "example": 1
          }
        },
        "required": [
          "roleId"
        ]
      },
      "AssignCafeRoleDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "User ID to assign role to",
            "example": 1
          },
          "roleId": {
            "type": "number",
            "description": "Café role ID to assign",
            "example": 1
          }
        },
        "required": [
          "userId",
          "roleId"
        ]
      },
      "RescheduleDto": {
        "type": "object",
        "properties": {}
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Project title",
            "example": "E-commerce Website Development"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "Need a full-stack e-commerce website with React and Node.js"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Is project public",
            "default": true
          }
        },
        "required": [
          "title",
          "description"
        ]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Project title",
            "example": "E-commerce Website Development"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "Need a full-stack e-commerce website with React and Node.js"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Is project public",
            "default": true
          },
          "status": {
            "type": "string",
            "description": "Project status",
            "enum": [
              "OPEN",
              "IN_PROGRESS",
              "COMPLETED"
            ]
          }
        }
      },
      "CreateTaskDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Task title",
            "example": "Setup authentication system"
          },
          "description": {
            "type": "string",
            "description": "Task description",
            "example": "Implement JWT authentication with user registration and login"
          },
          "price": {
            "type": "number",
            "description": "Task price in TechCoin",
            "example": 50,
            "minimum": 1
          }
        },
        "required": [
          "title",
          "description",
          "price"
        ]
      },
      "UpdateTaskDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Task title",
            "example": "Setup authentication system"
          },
          "description": {
            "type": "string",
            "description": "Task description",
            "example": "Implement JWT authentication with user registration and login"
          },
          "price": {
            "type": "number",
            "description": "Task price in TechCoin",
            "example": 50,
            "minimum": 1
          },
          "status": {
            "type": "string",
            "description": "Task status",
            "enum": [
              "PENDING",
              "ASSIGNED",
              "DONE"
            ]
          }
        }
      },
      "ApplyToTaskDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Application message",
            "example": "I have 3 years of experience with JWT authentication. I can complete this task within 2 days."
          }
        },
        "required": [
          "message"
        ]
      },
      "ChallengeType": {
        "type": "string",
        "enum": [
          "VOTE",
          "JUDGE"
        ],
        "description": "How the winner will be determined"
      },
      "CreateChallengeDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Challenge title",
            "example": "Code Master Challenge",
            "minLength": 5,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Detailed challenge description and requirements",
            "example": "Build a responsive web application using React and Node.js. Must include user authentication, CRUD operations, and responsive design.",
            "minLength": 20,
            "maxLength": 2000
          },
          "reward": {
            "type": "number",
            "description": "TechCoin reward for the winner",
            "example": 100,
            "minimum": 10,
            "maximum": 10000
          },
          "entryFee": {
            "type": "number",
            "description": "TechCoin entry fee required to participate",
            "example": 25,
            "minimum": 5,
            "maximum": 1000
          },
          "type": {
            "description": "How the winner will be determined",
            "example": "VOTE",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChallengeType"
              }
            ]
          },
          "startDate": {
            "type": "string",
            "description": "Challenge start date and time (ISO 8601)",
            "example": "2025-07-20T00:00:00Z"
          },
          "endDate": {
            "type": "string",
            "description": "Challenge end date and time (ISO 8601)",
            "example": "2025-07-27T23:59:59Z"
          },
          "requirements": {
            "type": "string",
            "description": "Additional requirements or rules",
            "example": "Code must be submitted via GitHub repository link",
            "maxLength": 1000
          },
          "tags": {
            "description": "Tags for challenge categorization",
            "example": [
              "javascript",
              "react",
              "nodejs",
              "fullstack"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "description",
          "reward",
          "entryFee",
          "type",
          "startDate",
          "endDate"
        ]
      },
      "JoinChallengeDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Optional message or approach description when joining",
            "example": "I plan to use React with TypeScript and implement real-time features using Socket.io",
            "maxLength": 500
          },
          "portfolioUrl": {
            "type": "string",
            "description": "GitHub or portfolio URL (optional)",
            "example": "https://github.com/username",
            "maxLength": 255
          }
        }
      },
      "SubmitChallengeDto": {
        "type": "object",
        "properties": {
          "submissionUrl": {
            "type": "string",
            "description": "URL to the project submission (GitHub, live demo, etc.)",
            "example": "https://github.com/username/challenge-project",
            "format": "url"
          },
          "demoUrl": {
            "type": "string",
            "description": "Live demo URL (optional)",
            "example": "https://my-challenge-app.vercel.app",
            "format": "url"
          },
          "description": {
            "type": "string",
            "description": "Description of the submission and approach taken",
            "example": "Built a full-stack e-commerce app with React, Node.js, and PostgreSQL. Features include user auth, product catalog, shopping cart, and payment integration.",
            "maxLength": 2000
          },
          "technologies": {
            "description": "Technologies used in the project",
            "example": [
              "React",
              "Node.js",
              "PostgreSQL",
              "Stripe",
              "TailwindCSS"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for judges/voters",
            "example": "Spent extra time on mobile responsiveness and accessibility features.",
            "maxLength": 500
          }
        },
        "required": [
          "submissionUrl",
          "description"
        ]
      },
      "CreateReactionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIKE",
              "LOVE",
              "LAUGH",
              "WOW",
              "SAD",
              "ANGRY"
            ],
            "description": "Type of reaction",
            "example": "LIKE"
          },
          "articleId": {
            "type": "number",
            "description": "Article ID (for article reactions)",
            "example": 1
          },
          "projectId": {
            "type": "number",
            "description": "Project ID (for project reactions)",
            "example": 1
          },
          "challengeId": {
            "type": "number",
            "description": "Challenge ID (for challenge reactions)",
            "example": 1
          },
          "cafePostId": {
            "type": "number",
            "description": "Cafe Post ID (for cafe post reactions)",
            "example": 1
          }
        },
        "required": [
          "type"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "User ID",
            "example": 1
          },
          "username": {
            "type": "object",
            "description": "Username",
            "example": "john_doe"
          },
          "firstName": {
            "type": "object",
            "description": "First name",
            "example": "John"
          },
          "lastName": {
            "type": "object",
            "description": "Last name",
            "example": "Doe"
          },
          "avatar": {
            "type": "object",
            "description": "Avatar URL"
          }
        },
        "required": [
          "id"
        ]
      },
      "ReactionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Reaction ID",
            "example": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "LIKE",
              "LOVE",
              "LAUGH",
              "WOW",
              "SAD",
              "ANGRY"
            ],
            "description": "Type of reaction",
            "example": "LIKE"
          },
          "userId": {
            "type": "number",
            "description": "User ID who made the reaction",
            "example": 1
          },
          "user": {
            "description": "User information (when included)",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDto"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Reaction creation date",
            "example": "2024-07-16T21:58:59.000Z"
          }
        },
        "required": [
          "id",
          "type",
          "userId",
          "createdAt"
        ]
      },
      "ReactionStatsDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of reactions",
            "example": 25
          },
          "breakdown": {
            "type": "object",
            "description": "Breakdown of reactions by type",
            "example": {
              "LIKE": 10,
              "LOVE": 5,
              "LAUGH": 3,
              "WOW": 4,
              "SAD": 2,
              "ANGRY": 1
            }
          },
          "userReaction": {
            "type": "string",
            "enum": [
              "LIKE",
              "LOVE",
              "LAUGH",
              "WOW",
              "SAD",
              "ANGRY"
            ],
            "description": "Current user reaction (if authenticated)",
            "example": "LIKE"
          }
        },
        "required": [
          "total",
          "breakdown"
        ]
      }
    }
  }
}