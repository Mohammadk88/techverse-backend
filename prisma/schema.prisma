// TechVerse Café Platform - Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Language and Country Tables
model Language {
  id          Int       @id @default(autoincrement())
  name        String
  nativeName  String    @map("native_name")
  code        String    @unique
  direction   String?   @default("ltr") // 'ltr' or 'rtl'
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  countries   Country[]
  users       User[]
  translations Translation[]
  articles    Article[]
  cafes       Cafe[]
  
  @@map("languages")
}

model Country {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique // e.g., TR, SA, US
  languageId  Int      @map("language_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  language    Language @relation(fields: [languageId], references: [id])
  cities      City[]
  users       User[]
  articles    Article[]
  cafes       Cafe[]
  
  @@map("countries")
}

model City {
  id          Int      @id @default(autoincrement())
  name        String
  countryId   Int      @map("country_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  country     Country  @relation(fields: [countryId], references: [id])
  users       User[]
  
  @@unique([name, countryId], name: "name_countryId")
  @@map("cities")
}

// User System
enum UserRole {
  GUEST
  MEMBER
  THINKER
  JOURNALIST
  BARISTA
  
  @@map("user_roles")
}

// Global Roles System
model GlobalRole {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  // Relations
  userRoles   UserGlobalRole[]
  
  @@map("global_roles")
}

model UserGlobalRole {
  id        Int        @id @default(autoincrement())
  userId    Int        @map("user_id")
  roleId    Int        @map("role_id")
  createdAt DateTime   @default(now()) @map("created_at")
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      GlobalRole @relation(fields: [roleId], references: [id])
  
  @@unique([userId, roleId])
  @@map("user_global_roles")
}

// Café Roles System
model CafeRole {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  
  // Relations
  userCafeRoles UserCafeRole[]
  
  @@map("cafe_roles")
}

model UserCafeRole {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  cafeId    Int      @map("cafe_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  role      CafeRole @relation(fields: [roleId], references: [id])
  
  @@unique([userId, cafeId, roleId])
  @@map("user_cafe_roles")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  username    String?   @unique
  avatar      String?
  bio         String?
  role        UserRole  @default(GUEST)
  xp          Int       @default(0)
  techCoin    Int       @default(100) @map("tech_coin") // Starting balance
  languageId  Int?      @map("language_id")
  countryId   Int?      @map("country_id")
  cityId      Int?      @map("city_id")
  isActive    Boolean   @default(true) @map("is_active")
  emailVerified Boolean @default(false) @map("email_verified")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  language    Language? @relation(fields: [languageId], references: [id])
  country     Country?  @relation(fields: [countryId], references: [id])
  city        City?     @relation(fields: [cityId], references: [id])
  
  // Content Relations
  articles        Article[]
  bookmarks       Bookmark[]
  
  // Café Relations
  ownedCafes      Cafe[]           @relation("CafeOwner")
  cafeMembers     CafeMember[]
  cafePosts       CafePost[]
  
  // Role Relations
  globalRoles     UserGlobalRole[]
  cafeRoles       UserCafeRole[]
  
  // AI Relations
  aiKeys          AIKey[]
  
  // Wallet Relations
  wallet          Wallet?
  walletTransactions WalletTransaction[]
  
  // Challenge Relations
  createdChallenges Challenge[]      @relation("ChallengeCreator")
  challengeParticipants ChallengeParticipant[]
  
  // Mini Projects Relations
  ownedProjects   Project[]        @relation("ProjectOwner")
  taskApplications TaskApplication[]
  taskAssignments TaskAssignment[]
  taskPayments    TaskPayment[]
  
  // Reactions Relations
  reactions       Reaction[]
  
  // Article Enhancement Relations
  scheduledPosts     ScheduledPost[]
  articleBoosts      ArticleBoost[]
  articleAIEnhancements ArticleAIEnhancement[]
  
  // Follow Relations
  followers          Follow[]         @relation("UserFollowing") // Users following this user
  following          Follow[]         @relation("UserFollowers") // Users this user is following
  
  @@map("users")
}

// Articles System
model ArticleCategory {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  articles    Article[]
  
  @@map("article_categories")
}

model ArticleTag {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  articles    ArticleTagRelation[]
  
  @@map("article_tags")
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  featuredImage String? @map("featured_image")
  categoryId  Int       @map("category_id")
  authorId    Int       @map("author_id")
  languageCode String?  @default("en") @map("language_code") // e.g., 'ar', 'en', 'fr'
  countryCode String?   @map("country_code")  // e.g., 'SY', 'TR', 'SA'
  isPublished Boolean   @default(false) @map("is_published")
  publishedAt DateTime? @map("published_at")
  scheduledFor DateTime? @map("scheduled_for")
  isAI        Boolean   @default(false) @map("is_ai")
  aiPrompt    String?   @map("ai_prompt")
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  category    ArticleCategory @relation(fields: [categoryId], references: [id])
  author      User           @relation(fields: [authorId], references: [id])
  language    Language?      @relation(fields: [languageCode], references: [code])
  country     Country?       @relation(fields: [countryCode], references: [code])
  tags        ArticleTagRelation[]
  bookmarks   Bookmark[]
  reactions   Reaction[]
  scheduledPosts     ScheduledPost[]
  boosts             ArticleBoost[]
  aiEnhancements     ArticleAIEnhancement[]
  
  @@index([languageCode])
  @@index([countryCode])
  @@index([languageCode, countryCode])
  @@index([featured])
  @@index([isPublished])
  @@index([publishedAt])
  @@map("articles")
}

model ArticleTagRelation {
  id        Int         @id @default(autoincrement())
  articleId Int         @map("article_id")
  tagId     Int         @map("tag_id")
  createdAt DateTime    @default(now()) @map("created_at")
  
  // Relations
  article   Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       ArticleTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([articleId, tagId])
  @@map("article_tag_relations")
}

// Community Posts System - REMOVED (Future Development)
// Note: Posts system will be implemented in future versions

// Bookmarks System (Articles Only)
model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  articleId Int      @map("article_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, articleId])
  @@map("bookmarks")
}

// Cafés (Discussion Groups) System

// Cafés (Discussion Groups) System
model Cafe {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  coverImage  String?   @map("cover_image")
  ownerId     Int       @map("owner_id")
  isPrivate   Boolean   @default(false) @map("is_private")
  languageCode String?  @default("en") @map("language_code") // ISO 639-1 language code
  countryCode String?   @map("country_code") // ISO 3166-1 alpha-2 country code
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  owner       User           @relation("CafeOwner", fields: [ownerId], references: [id])
  language    Language?      @relation(fields: [languageCode], references: [code])
  country     Country?       @relation(fields: [countryCode], references: [code])
  members     CafeMember[]
  posts       CafePost[]
  userRoles   UserCafeRole[]
  
  @@index([languageCode])
  @@index([countryCode])
  @@index([languageCode, countryCode])
  @@map("cafes")
}

model CafeMember {
  id        Int      @id @default(autoincrement())
  cafeId    Int      @map("cafe_id")
  userId    Int      @map("user_id")
  joinedAt  DateTime @default(now()) @map("joined_at")
  
  // Relations
  cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([cafeId, userId])
  @@map("cafe_members")
}

model CafePost {
  id        Int      @id @default(autoincrement())
  content   String
  cafeId    Int      @map("cafe_id")
  authorId  Int      @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id])
  reactions Reaction[]
  
  @@map("cafe_posts")
}

// Mini Projects + Tasks System
enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  
  @@map("project_status")
}

model Project {
  id          Int           @id @default(autoincrement())
  ownerId     Int           @map("owner_id")
  title       String
  description String
  isPublic    Boolean       @default(true) @map("is_public")
  status      ProjectStatus @default(OPEN)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relations
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  tasks       ProjectTask[]
  reactions   Reaction[]
  
  @@map("projects")
}

enum TaskStatus {
  PENDING
  ASSIGNED
  DONE
  
  @@map("task_status")
}

model ProjectTask {
  id          Int           @id @default(autoincrement())
  projectId   Int           @map("project_id")
  title       String
  description String
  price       Int           // in TechCoin
  status      TaskStatus    @default(PENDING)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relations
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  applications TaskApplication[]
  assignment  TaskAssignment?
  payment     TaskPayment?
  
  @@map("project_tasks")
}

model TaskApplication {
  id          Int         @id @default(autoincrement())
  taskId      Int         @map("task_id")
  applicantId Int         @map("applicant_id")
  message     String
  createdAt   DateTime    @default(now()) @map("created_at")
  
  // Relations
  task        ProjectTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  applicant   User        @relation(fields: [applicantId], references: [id])
  
  @@unique([taskId, applicantId])
  @@map("task_applications")
}

model TaskAssignment {
  id          Int         @id @default(autoincrement())
  taskId      Int         @unique @map("task_id")
  userId      Int         @map("user_id")
  assignedAt  DateTime    @default(now()) @map("assigned_at")
  
  // Relations
  task        ProjectTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])
  
  @@map("task_assignments")
}

model TaskPayment {
  id          Int         @id @default(autoincrement())
  taskId      Int         @unique @map("task_id")
  userId      Int         @map("user_id") // recipient of payment
  amount      Int         // TechCoin amount
  isPaid      Boolean     @default(false) @map("is_paid")
  paidAt      DateTime?   @map("paid_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  
  // Relations
  task        ProjectTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])
  
  @@map("task_payments")
}

// Translations System
model Translation {
  id        Int      @id @default(autoincrement())
  key       String
  langCode  String   @map("lang_code")
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  language  Language @relation(fields: [langCode], references: [code])
  
  @@unique([key, langCode])
  @@map("translations")
}

// AI Provider System
model AIProvider {
  id        Int       @id @default(autoincrement())
  name      String    @unique     // openai, gemini, claude
  label     String                // Display name
  isActive  Boolean   @default(true) @map("is_active")
  isDefault Boolean   @default(false) @map("is_default")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  // Relations
  keys      AIKey[]
  
  @@map("ai_providers")
}

model AIKey {
  id         Int        @id @default(autoincrement())
  userId     Int?       @map("user_id")     // null = system-level key
  providerId Int        @map("provider_id")
  keyName    String?    @map("key_name")    // user-friendly name for the key
  secretKey  String     @map("secret_key")  // store as encrypted
  isActive   Boolean    @default(true) @map("is_active")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  
  // Relations
  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   AIProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@unique([userId, providerId]) // One key per user per provider
  @@map("ai_keys")
}

// Digital Wallet System
model Wallet {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique @map("user_id")
  techCoin   Int      @default(100) @map("tech_coin")
  xp         Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wallets")
}

enum TransactionType {
  BUY
  EARN
  SPEND
  
  @@map("transaction_types")
}

model WalletTransaction {
  id          Int             @id @default(autoincrement())
  userId      Int             @map("user_id")
  type        TransactionType
  amount      Int
  description String
  createdAt   DateTime        @default(now()) @map("created_at")
  
  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wallet_transactions")
}

// Challenge System
enum ChallengeType {
  VOTE
  JUDGE
  
  @@map("challenge_types")
}

enum ChallengeStatus {
  OPEN
  CLOSED
  
  @@map("challenge_status")
}

model Challenge {
  id          Int               @id @default(autoincrement())
  title       String
  description String
  reward      Int               // TechCoin reward for winner
  entryFee    Int               // TechCoin fee to participate
  type        ChallengeType
  startDate   DateTime          @map("start_date")
  endDate     DateTime          @map("end_date")
  status      ChallengeStatus   @default(OPEN)
  createdById Int               @map("created_by_id")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  
  // Relations
  createdBy   User              @relation("ChallengeCreator", fields: [createdById], references: [id])
  participants ChallengeParticipant[]
  reactions   Reaction[]
  
  @@map("challenges")
}

enum ParticipantResult {
  PENDING
  WINNER
  LOST
  
  @@map("participant_results")
}

model ChallengeParticipant {
  id            Int               @id @default(autoincrement())
  challengeId   Int               @map("challenge_id")
  userId        Int               @map("user_id")
  submissionUrl String?           @map("submission_url")
  voteCount     Int               @default(0) @map("vote_count")
  result        ParticipantResult @default(PENDING)
  submittedAt   DateTime?         @map("submitted_at")
  createdAt     DateTime          @default(now()) @map("created_at")
  
  // Relations
  challenge     Challenge         @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([challengeId, userId])
  @@map("challenge_participants")
}

// ==========================================
// REACTIONS SYSTEM
// ==========================================

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  SAD
  ANGRY
  
  @@map("reaction_types")
}

model Reaction {
  id          Int          @id @default(autoincrement())
  userId      Int          @map("user_id")
  type        ReactionType
  
  // Content references (only one should be set)
  articleId   Int?         @map("article_id")
  projectId   Int?         @map("project_id")
  challengeId Int?         @map("challenge_id")
  cafePostId  Int?         @map("cafe_post_id")
  
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  article     Article?     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  challenge   Challenge?   @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  cafePost    CafePost?    @relation(fields: [cafePostId], references: [id], onDelete: Cascade)
  
  // Ensure user can only react once per content
  @@unique([userId, articleId])
  @@unique([userId, projectId])
  @@unique([userId, challengeId])
  @@unique([userId, cafePostId])
  @@map("reactions")
}

// ==========================================
// ARTICLE SCHEDULING & ENHANCEMENT SYSTEM
// ==========================================

enum ScheduledPostStatus {
  SCHEDULED
  PUBLISHED
  CANCELED
  
  @@map("scheduled_post_status")
}

model ScheduledPost {
  id          Int                 @id @default(autoincrement())
  articleId   Int                 @map("article_id")
  userId      Int                 @map("user_id")
  publishAt   DateTime            @map("publish_at")
  aiEnhanced  Boolean             @default(false) @map("ai_enhanced")
  status      ScheduledPostStatus @default(SCHEDULED)
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  
  // Relations
  article     Article             @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([articleId]) // One scheduled post per article
  @@index([publishAt, status])
  @@map("scheduled_posts")
}

model ArticleBoost {
  id          Int      @id @default(autoincrement())
  articleId   Int      @map("article_id")
  userId      Int      @map("user_id")
  coinSpent   Int      @map("coin_spent") // TechCoin spent for boosting
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([startDate, endDate])
  @@index([articleId])
  @@map("article_boosts")
}

enum AIEnhancementType {
  TITLE_OPTIMIZATION
  SUMMARY_GENERATION
  SEO_TAGS
  FULL_ENHANCEMENT
  
  @@map("ai_enhancement_types")
}

model ArticleAIEnhancement {
  id             Int               @id @default(autoincrement())
  articleId      Int               @map("article_id")
  userId         Int               @map("user_id")
  enhancementType AIEnhancementType @map("enhancement_type")
  originalValue  String            @map("original_value") // Original title/summary/tags
  enhancedValue  String            @map("enhanced_value") // AI-enhanced version
  coinSpent      Int               @map("coin_spent") // TechCoin spent for AI enhancement
  isApplied      Boolean           @default(false) @map("is_applied") // Whether user applied the enhancement
  createdAt      DateTime          @default(now()) @map("created_at")
  
  // Relations
  article        Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([articleId, enhancementType])
  @@map("article_ai_enhancements")
}

// ==========================================
// FOLLOW SYSTEM
// ==========================================

model Follow {
  id         Int      @id @default(autoincrement())
  followerId Int      @map("follower_id") // User who follows
  followingId Int     @map("following_id") // User being followed
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  follower   User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following  User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}
