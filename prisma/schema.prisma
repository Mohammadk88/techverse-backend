generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ai_keys {
  id           Int          @id @default(autoincrement())
  user_id      Int?
  provider_id  Int
  secret_key   String
  is_active    Boolean      @default(true)
  created_at   DateTime     @default(now())
  updated_at   DateTime
  key_name     String?
  ai_providers ai_providers @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  users        users?       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, provider_id])
}

model ai_providers {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  label      String
  is_active  Boolean   @default(true)
  is_default Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime
  ai_keys    ai_keys[]
}

model article_ai_enhancements {
  id               Int                  @id @default(autoincrement())
  article_id       Int
  user_id          Int
  enhancement_type ai_enhancement_types
  original_value   String
  enhanced_value   String
  coin_spent       Int
  is_applied       Boolean              @default(false)
  created_at       DateTime             @default(now())
  articles         articles             @relation(fields: [article_id], references: [id], onDelete: Cascade)
  users            users                @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([article_id, enhancement_type])
}

model article_boosts {
  id         Int      @id @default(autoincrement())
  article_id Int
  user_id    Int
  coin_spent Int
  start_date DateTime
  end_date   DateTime
  created_at DateTime @default(now())
  articles   articles @relation(fields: [article_id], references: [id], onDelete: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([article_id])
  @@index([start_date, end_date])
}

model article_categories {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime
  articles    articles[]
}

model article_tag_relations {
  id           Int          @id @default(autoincrement())
  article_id   Int
  tag_id       Int
  created_at   DateTime     @default(now())
  articles     articles     @relation(fields: [article_id], references: [id], onDelete: Cascade)
  article_tags article_tags @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([article_id, tag_id])
}

model article_tags {
  id                    Int                     @id @default(autoincrement())
  name                  String
  slug                  String                  @unique
  created_at            DateTime                @default(now())
  updated_at            DateTime
  article_tag_relations article_tag_relations[]
}

model articles {
  id                      Int                       @id @default(autoincrement())
  title                   String
  slug                    String                    @unique
  content                 String
  excerpt                 String?
  featured_image          String?
  category_id             Int
  author_id               Int
  is_published            Boolean                   @default(false)
  published_at            DateTime?
  created_at              DateTime                  @default(now())
  updated_at              DateTime
  ai_prompt               String?
  is_ai                   Boolean                   @default(false)
  scheduled_for           DateTime?
  country_code            String?
  featured                Boolean                   @default(false)
  language_code           String?                   @default("en")
  article_ai_enhancements article_ai_enhancements[]
  article_boosts          article_boosts[]
  article_tag_relations   article_tag_relations[]
  users                   users                     @relation(fields: [author_id], references: [id])
  article_categories      article_categories        @relation(fields: [category_id], references: [id])
  countries               countries?                @relation(fields: [country_code], references: [code])
  languages               languages?                @relation(fields: [language_code], references: [code])
  bookmarks               bookmarks[]
  reactions               reactions[]
  scheduled_posts         scheduled_posts?

  @@index([country_code])
  @@index([featured])
  @@index([is_published])
  @@index([language_code, country_code])
  @@index([language_code])
  @@index([published_at])
}

model bookmarks {
  id         Int      @id @default(autoincrement())
  user_id    Int
  article_id Int
  created_at DateTime @default(now())
  articles   articles @relation(fields: [article_id], references: [id], onDelete: Cascade)
  users      users    @relation(fields: [user_id], references: [id])

  @@unique([user_id, article_id])
}

model cafe_members {
  id        Int      @id @default(autoincrement())
  cafe_id   Int
  user_id   Int
  joined_at DateTime @default(now())
  cafes     cafes    @relation(fields: [cafe_id], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [user_id], references: [id])

  @@unique([cafe_id, user_id])
}

model cafe_posts {
  id         Int         @id @default(autoincrement())
  content    String
  cafe_id    Int
  author_id  Int
  created_at DateTime    @default(now())
  updated_at DateTime
  users      users       @relation(fields: [author_id], references: [id])
  cafes      cafes       @relation(fields: [cafe_id], references: [id], onDelete: Cascade)
  reactions  reactions[]
}

model cafe_roles {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  created_at      DateTime          @default(now())
  updated_at      DateTime
  user_cafe_roles user_cafe_roles[]
}

model cafes {
  id              Int               @id @default(autoincrement())
  name            String
  slug            String            @unique
  description     String?
  cover_image     String?
  owner_id        Int
  is_private      Boolean           @default(false)
  created_at      DateTime          @default(now())
  updated_at      DateTime
  country_code    String?
  language_code   String?           @default("en")
  cafe_members    cafe_members[]
  cafe_posts      cafe_posts[]
  countries       countries?        @relation(fields: [country_code], references: [code])
  languages       languages?        @relation(fields: [language_code], references: [code])
  users           users             @relation(fields: [owner_id], references: [id])
  user_cafe_roles user_cafe_roles[]

  @@index([country_code])
  @@index([language_code, country_code])
  @@index([language_code])
}

model challenge_participants {
  id             Int                 @id @default(autoincrement())
  challenge_id   Int
  user_id        Int
  submission_url String?
  vote_count     Int                 @default(0)
  result         participant_results @default(PENDING)
  submitted_at   DateTime?
  created_at     DateTime            @default(now())
  challenges     challenges          @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  users          users               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([challenge_id, user_id])
}

model challenges {
  id                     Int                      @id @default(autoincrement())
  title                  String
  description            String
  reward                 Int
  entryFee               Int
  type                   challenge_types
  start_date             DateTime
  end_date               DateTime
  status                 challenge_status         @default(OPEN)
  created_by_id          Int
  created_at             DateTime                 @default(now())
  updated_at             DateTime
  challenge_participants challenge_participants[]
  users                  users                    @relation(fields: [created_by_id], references: [id])
  reactions              reactions[]
}

model cities {
  id         Int       @id @default(autoincrement())
  name       String
  country_id Int
  created_at DateTime  @default(now())
  updated_at DateTime
  countries  countries @relation(fields: [country_id], references: [id])
  users      users[]

  @@unique([name, country_id])
}

model countries {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  language_id Int
  created_at  DateTime   @default(now())
  updated_at  DateTime
  code        String     @unique
  articles    articles[]
  cafes       cafes[]
  cities      cities[]
  languages   languages  @relation(fields: [language_id], references: [id])
  users       users[]
}

model follows {
  id                                Int      @id @default(autoincrement())
  follower_id                       Int
  following_id                      Int
  created_at                        DateTime @default(now())
  users_follows_follower_idTousers  users    @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade)
  users_follows_following_idTousers users    @relation("follows_following_idTousers", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
  @@index([follower_id])
  @@index([following_id])
}

model global_roles {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  description       String?
  created_at        DateTime            @default(now())
  updated_at        DateTime
  user_global_roles user_global_roles[]
}

model languages {
  id           Int            @id @default(autoincrement())
  name         String
  native_name  String
  code         String         @unique
  created_at   DateTime       @default(now())
  updated_at   DateTime
  direction    String?        @default("ltr")
  articles     articles[]
  cafes        cafes[]
  countries    countries[]
  translations translations[]
  users        users[]
}

model project_tasks {
  id                Int                 @id @default(autoincrement())
  project_id        Int
  title             String
  description       String
  price             Int
  status            task_status         @default(PENDING)
  created_at        DateTime            @default(now())
  updated_at        DateTime
  projects          projects            @relation(fields: [project_id], references: [id], onDelete: Cascade)
  task_applications task_applications[]
  task_assignments  task_assignments?
  task_payments     task_payments?
}

model projects {
  id            Int             @id @default(autoincrement())
  owner_id      Int
  title         String
  description   String
  is_public     Boolean         @default(true)
  status        project_status  @default(OPEN)
  created_at    DateTime        @default(now())
  updated_at    DateTime
  project_tasks project_tasks[]
  users         users           @relation(fields: [owner_id], references: [id])
  reactions     reactions[]
}

model reactions {
  id           Int            @id @default(autoincrement())
  user_id      Int
  type         reaction_types
  article_id   Int?
  project_id   Int?
  challenge_id Int?
  cafe_post_id Int?
  created_at   DateTime       @default(now())
  updated_at   DateTime
  articles     articles?      @relation(fields: [article_id], references: [id], onDelete: Cascade)
  cafe_posts   cafe_posts?    @relation(fields: [cafe_post_id], references: [id], onDelete: Cascade)
  challenges   challenges?    @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  projects     projects?      @relation(fields: [project_id], references: [id], onDelete: Cascade)
  users        users          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, article_id])
  @@unique([user_id, cafe_post_id])
  @@unique([user_id, challenge_id])
  @@unique([user_id, project_id])
}

model scheduled_posts {
  id          Int                   @id @default(autoincrement())
  article_id  Int                   @unique
  user_id     Int
  publish_at  DateTime
  ai_enhanced Boolean               @default(false)
  status      scheduled_post_status @default(SCHEDULED)
  created_at  DateTime              @default(now())
  updated_at  DateTime
  articles    articles              @relation(fields: [article_id], references: [id], onDelete: Cascade)
  users       users                 @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([publish_at, status])
}

model task_applications {
  id            Int           @id @default(autoincrement())
  task_id       Int
  applicant_id  Int
  message       String
  created_at    DateTime      @default(now())
  users         users         @relation(fields: [applicant_id], references: [id])
  project_tasks project_tasks @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@unique([task_id, applicant_id])
}

model task_assignments {
  id            Int           @id @default(autoincrement())
  task_id       Int           @unique
  user_id       Int
  assigned_at   DateTime      @default(now())
  project_tasks project_tasks @relation(fields: [task_id], references: [id], onDelete: Cascade)
  users         users         @relation(fields: [user_id], references: [id])
}

model task_payments {
  id            Int           @id @default(autoincrement())
  task_id       Int           @unique
  user_id       Int
  amount        Int
  is_paid       Boolean       @default(false)
  paid_at       DateTime?
  created_at    DateTime      @default(now())
  project_tasks project_tasks @relation(fields: [task_id], references: [id], onDelete: Cascade)
  users         users         @relation(fields: [user_id], references: [id])
}

model translations {
  id         Int       @id @default(autoincrement())
  key        String
  lang_code  String
  value      String
  created_at DateTime  @default(now())
  updated_at DateTime
  languages  languages @relation(fields: [lang_code], references: [code])

  @@unique([key, lang_code])
}

model user_cafe_roles {
  id         Int        @id @default(autoincrement())
  user_id    Int
  cafe_id    Int
  role_id    Int
  created_at DateTime   @default(now())
  cafes      cafes      @relation(fields: [cafe_id], references: [id], onDelete: Cascade)
  cafe_roles cafe_roles @relation(fields: [role_id], references: [id])
  users      users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, cafe_id, role_id])
}

model user_global_roles {
  id           Int          @id @default(autoincrement())
  user_id      Int
  role_id      Int
  created_at   DateTime     @default(now())
  global_roles global_roles @relation(fields: [role_id], references: [id])
  users        users        @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model users {
  id                                  Int                       @id @default(autoincrement())
  email                               String                    @unique
  password                            String
  first_name                          String?
  last_name                           String?
  username                            String?                   @unique
  avatar                              String?
  bio                                 String?
  role                                user_roles                @default(GUEST)
  xp                                  Int                       @default(0)
  language_id                         Int?
  country_id                          Int?
  is_active                           Boolean                   @default(true)
  email_verified                      Boolean                   @default(false)
  created_at                          DateTime                  @default(now())
  updated_at                          DateTime
  city_id                             Int?
  tech_coin                           Int                       @default(100)
  ai_keys                             ai_keys[]
  article_ai_enhancements             article_ai_enhancements[]
  article_boosts                      article_boosts[]
  articles                            articles[]
  bookmarks                           bookmarks[]
  cafe_members                        cafe_members[]
  cafe_posts                          cafe_posts[]
  cafes                               cafes[]
  challenge_participants              challenge_participants[]
  challenges                          challenges[]
  follows_follows_follower_idTousers  follows[]                 @relation("follows_follower_idTousers")
  follows_follows_following_idTousers follows[]                 @relation("follows_following_idTousers")
  projects                            projects[]
  reactions                           reactions[]
  scheduled_posts                     scheduled_posts[]
  task_applications                   task_applications[]
  task_assignments                    task_assignments[]
  task_payments                       task_payments[]
  user_cafe_roles                     user_cafe_roles[]
  user_global_roles                   user_global_roles[]
  cities                              cities?                   @relation(fields: [city_id], references: [id])
  countries                           countries?                @relation(fields: [country_id], references: [id])
  languages                           languages?                @relation(fields: [language_id], references: [id])
  wallet_transactions                 wallet_transactions[]
  wallets                             wallets?
}

model wallet_transactions {
  id          Int               @id @default(autoincrement())
  user_id     Int
  type        transaction_types
  amount      Int
  description String
  created_at  DateTime          @default(now())
  users       users             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model wallets {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  tech_coin  Int      @default(100)
  xp         Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum ai_enhancement_types {
  TITLE_OPTIMIZATION
  SUMMARY_GENERATION
  SEO_TAGS
  FULL_ENHANCEMENT
}

enum challenge_status {
  OPEN
  CLOSED
}

enum challenge_types {
  VOTE
  JUDGE
}

enum participant_results {
  PENDING
  WINNER
  LOST
}

enum project_status {
  OPEN
  IN_PROGRESS
  COMPLETED
}

enum reaction_types {
  LIKE
  LOVE
  LAUGH
  WOW
  SAD
  ANGRY
}

enum scheduled_post_status {
  SCHEDULED
  PUBLISHED
  CANCELED
}

enum task_status {
  PENDING
  ASSIGNED
  DONE
}

enum transaction_types {
  BUY
  EARN
  SPEND
}

enum user_roles {
  GUEST
  MEMBER
  THINKER
  JOURNALIST
  BARISTA
}
